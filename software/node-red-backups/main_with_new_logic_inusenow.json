[
    {
        "id": "e244799c6bbacd3c",
        "type": "tab",
        "label": "empty",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "07e2886f15f7b5a8",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": ""
    },
    {
        "id": "d964baea499cbd73",
        "type": "tab",
        "label": "Hardware Layer",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "da4ad80f311d4a4a",
        "type": "tab",
        "label": "Broker",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "9fdd40e6fd51eece",
        "type": "tab",
        "label": "Fridge",
        "disabled": false,
        "info": "",
        "env": [
            {
                "name": "threshold",
                "value": "1000",
                "type": "str"
            }
        ]
    },
    {
        "id": "da7bf4c175fa04bc",
        "type": "tab",
        "label": "MPPT",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "b8c63413a01bd779",
        "type": "tab",
        "label": "SOC",
        "disabled": false,
        "info": ""
    },
    {
        "id": "25ed28d0b66e3987",
        "type": "tab",
        "label": "Temp/water",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "caafbe242ee04767",
        "type": "tab",
        "label": "Busses",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "6cf6befc5f6ea083",
        "type": "tab",
        "label": "Advanced",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "b57434cd3c37a84c",
        "type": "subflow",
        "name": "Fridge control",
        "info": "# Description\n\n## input parameters:\n- msg.payload --> true == turn on fridge\n-             --> false== turn off fridge\n- msg.switch_to_lfp --> true == power source is LFP battery\n-                   --> false == power source is Lead battery",
        "category": "",
        "in": [
            {
                "x": 40,
                "y": 180,
                "wires": [
                    {
                        "id": "8dec80308fb9d60e"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1910,
                "y": 180,
                "wires": [
                    {
                        "id": "64eeaf8b23c966c6",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "85860d2069ad95cd",
        "type": "subflow",
        "name": "Charger Control",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 180,
                "wires": [
                    {
                        "id": "eb94063d41bc944d"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1530,
                "y": 180,
                "wires": [
                    {
                        "id": "2ca40f854aa53bc4",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "bec2118860bb84ba",
        "type": "subflow",
        "name": "ovveride",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 160,
                "y": 160,
                "wires": [
                    {
                        "id": "2ca9afd17404e819"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1300,
                "y": 200,
                "wires": [
                    {
                        "id": "b2bbb41eaf92958d",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "threshold",
                "type": "num",
                "value": "1000"
            }
        ],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "d8f3724deb76e0db",
        "type": "subflow",
        "name": "Get settings",
        "info": "# Input:\n## payload: name of the setting to retrieve\n\n# output\n## payload: value of the setting from db\n## topic: name of the setting\n",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "9a9241d78a196ff1"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 700,
                "y": 80,
                "wires": [
                    {
                        "id": "81760f68e8cb2a1a",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "417a6a1d3a391809",
        "type": "subflow",
        "name": "MPPT Hex",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 20,
                "y": 80,
                "wires": [
                    {
                        "id": "b60a37816360662b"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 780,
                "y": 40,
                "wires": [
                    {
                        "id": "de36f2d1d965bb8e",
                        "port": 0
                    }
                ]
            },
            {
                "x": 780,
                "y": 80,
                "wires": [
                    {
                        "id": "de36f2d1d965bb8e",
                        "port": 1
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "d4e4f65b33f57c36",
        "type": "subflow",
        "name": "Get settings (2)",
        "info": "# Input:\n## payload: name of the setting to retrieve\n\n# output\n## payload: value of the setting from db\n## topic: name of the setting\n",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "aae203e2a664a103"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 700,
                "y": 80,
                "wires": [
                    {
                        "id": "225ac2159b67138b",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "281e43440f4d8703",
        "type": "subflow",
        "name": "MPPT Hex (2)",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 20,
                "y": 80,
                "wires": [
                    {
                        "id": "ac73327ec1e94ec3"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 780,
                "y": 40,
                "wires": [
                    {
                        "id": "51453b2083ca9ac6",
                        "port": 0
                    }
                ]
            },
            {
                "x": 780,
                "y": 80,
                "wires": [
                    {
                        "id": "51453b2083ca9ac6",
                        "port": 1
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "b10498f78b9fb638",
        "type": "group",
        "z": "caafbe242ee04767",
        "name": "Get Lead Voltage with ADC over I2C",
        "style": {
            "label": true
        },
        "nodes": [
            "201c2c30807ef967",
            "adac8c1d20d88736",
            "4ae8904edfe813c1",
            "735962933b07806b",
            "8fd56c6b0a475c8d",
            "97a5e37cf3a5ed25",
            "a064f7feb640a913"
        ],
        "x": 0,
        "y": 0
    },
    {
        "id": "4f72bd100e0aeb55",
        "type": "group",
        "z": "da7bf4c175fa04bc",
        "name": "MPPT Broadcast",
        "style": {
            "label": true
        },
        "nodes": [
            "0b3aacd51f241ec7",
            "d398aa2f1dc0021d",
            "834eead8c677744d",
            "b3e115c07c82ac4d",
            "7f76f0559dba727b",
            "df9907032e87ef71",
            "9206d6b33eb1b80c"
        ],
        "x": 14,
        "y": 19,
        "w": 1132,
        "h": 162
    },
    {
        "id": "9a882e1f0a753eb1",
        "type": "group",
        "z": "da7bf4c175fa04bc",
        "name": "Dashboard",
        "style": {
            "label": true
        },
        "nodes": [
            "354e89c79761d99d",
            "345ad1e09979daa0",
            "d9d756885fb28e2c",
            "914238ef2b24324d",
            "f775612d28b32cd1",
            "fcf5b50387f36a55",
            "697ea17acc99108d",
            "a7a27823a9e4a80f",
            "1cef5f85427ebe26",
            "f3f2fd7cb8e09f2f",
            "045cfff27c109e23",
            "22735b6bd0e630b4",
            "b40996e50e7b73d6",
            "7224dfcc57e8f21e",
            "e8c3c198f6626769"
        ],
        "x": 1314,
        "y": 19,
        "w": 412,
        "h": 282
    },
    {
        "id": "dbe48b6a4f7bad55",
        "type": "group",
        "z": "caafbe242ee04767",
        "name": "Get Temperatures from sensors over 1 Wire",
        "style": {
            "label": true
        },
        "nodes": [
            "5037b72635b1b458",
            "6d7e5dbf538df0f9",
            "d99ec2a5f880790f",
            "2efaa46c04158d68",
            "00a386aa3c73ecfd",
            "e53ab43e069dd8a3",
            "3168cfd8a06313e9",
            "d9ac4e5b6e2bb63d",
            "f351f4af7934daf0",
            "3b8cc007df89f286",
            "b850689cb2dcc1db",
            "c0742511f4277387",
            "098183b4045c6339",
            "ef2eeb068612671d",
            "2c9edde2ecbcc284",
            "02708b1a04d8371d"
        ],
        "x": 0,
        "y": 0
    },
    {
        "id": "c9b92354a4aa9390",
        "type": "group",
        "z": "25ed28d0b66e3987",
        "name": "Water Dashboard",
        "style": {
            "label": true
        },
        "nodes": [
            "724a886f40d6569a",
            "06a1bf7710a30c82",
            "f4e29d19202c52ad",
            "6b479ab1d335e66c",
            "d7c2d8387b1c3f57",
            "9da637b037db05e4",
            "99581bad73f3c8e5",
            "1b4cae8416f67d6d"
        ],
        "x": 34,
        "y": 379,
        "w": 752,
        "h": 202
    },
    {
        "id": "aa0d157d98b48326",
        "type": "group",
        "z": "25ed28d0b66e3987",
        "name": "Temperature Dashboard",
        "style": {
            "label": true
        },
        "nodes": [
            "55a6ae3ac445f2fc",
            "fb49eb463b609a68",
            "d5e999ebc14c178f",
            "0eff0e3cb6204a6d"
        ],
        "x": 534,
        "y": 119,
        "w": 252,
        "h": 122
    },
    {
        "id": "a74bb25de5c78e26",
        "type": "ui_base",
        "theme": {
            "name": "theme-dark",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "reset": false
            },
            "themeState": {
                "base-color": {
                    "default": "#097479",
                    "value": "#097479",
                    "edited": true
                },
                "page-titlebar-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#111111",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#0eb8c0",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#555555",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#eeeeee",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#333333",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "true",
            "allowSwipe": "false",
            "lockMenu": "icon",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 44,
                "sy": 47,
                "gx": 6,
                "gy": 1,
                "cx": 6,
                "cy": 0,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "8d207109f202f502",
        "type": "ui_tab",
        "name": "Home",
        "icon": "dashboard",
        "order": 1,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "6c304982dc7231d9",
        "type": "ui_group",
        "name": "Fridge",
        "tab": "8d207109f202f502",
        "order": 4,
        "disp": false,
        "width": "7",
        "collapse": false,
        "className": ""
    },
    {
        "id": "72a8d1b89999131f",
        "type": "ui_group",
        "name": "MPPT ",
        "tab": "8d207109f202f502",
        "order": 2,
        "disp": false,
        "width": "7",
        "collapse": false,
        "className": ""
    },
    {
        "id": "594a8a527370c352",
        "type": "serial-port",
        "serialport": "/dev/ttyS0",
        "serialbaud": "19200",
        "databits": "8",
        "parity": "none",
        "stopbits": "1",
        "waitfor": "",
        "dtr": "none",
        "rts": "none",
        "cts": "none",
        "dsr": "none",
        "newline": "\\n",
        "bin": "bin",
        "out": "char",
        "addchar": "",
        "responsetimeout": "10000"
    },
    {
        "id": "7ac90561cb0ad481",
        "type": "ui_group",
        "name": "Serial COM",
        "tab": "e1343744e4d74a0b",
        "order": 2,
        "disp": true,
        "width": "7",
        "collapse": false,
        "className": ""
    },
    {
        "id": "9accbd4c3bdcd845",
        "type": "MySQLdatabase",
        "name": "database",
        "host": "127.0.0.1",
        "port": "3306",
        "db": "siegfried",
        "tz": "",
        "charset": "UTF8"
    },
    {
        "id": "7dbe224d7e5b35ba",
        "type": "ui_group",
        "name": "SOC",
        "tab": "8d207109f202f502",
        "order": 3,
        "disp": false,
        "width": "7",
        "collapse": false,
        "className": ""
    },
    {
        "id": "83e9ca27a8b9a1f0",
        "type": "ui_group",
        "name": "Overview",
        "tab": "e1343744e4d74a0b",
        "order": 1,
        "disp": true,
        "width": "7",
        "collapse": false,
        "className": ""
    },
    {
        "id": "e1343744e4d74a0b",
        "type": "ui_tab",
        "name": "Advanced",
        "icon": "dashboard",
        "order": 3,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "7fbe76992a0ffcb4",
        "type": "ui_group",
        "name": "Testing",
        "tab": "e1343744e4d74a0b",
        "order": 3,
        "disp": true,
        "width": "7",
        "collapse": false,
        "className": ""
    },
    {
        "id": "4c88ce79aeb1c97e",
        "type": "ui_group",
        "name": "Temperature",
        "tab": "8d207109f202f502",
        "order": 1,
        "disp": false,
        "width": "7",
        "collapse": false,
        "className": ""
    },
    {
        "id": "8ccf1fb7e0607deb",
        "type": "ui_group",
        "name": "Water",
        "tab": "8d207109f202f502",
        "order": 5,
        "disp": false,
        "width": "7",
        "collapse": false,
        "className": ""
    },
    {
        "id": "2707be114455df03",
        "type": "ui_base",
        "theme": {
            "name": "theme-dark",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#097479",
                    "value": "#097479",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#111111",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#0eb8c0",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#555555",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#eeeeee",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#333333",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "90e9183b2c5c9fcf",
        "type": "ui_group",
        "name": "User view",
        "tab": "8d207109f202f502",
        "order": 6,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "0c44ad8057d4b32c",
        "type": "ui_spacer",
        "z": "25ed28d0b66e3987",
        "name": "spacer",
        "group": "72a8d1b89999131f",
        "order": 1,
        "width": 7,
        "height": 1
    },
    {
        "id": "2191331f2ea45f85",
        "type": "ui_spacer",
        "z": "25ed28d0b66e3987",
        "name": "spacer",
        "group": "7dbe224d7e5b35ba",
        "order": 1,
        "width": 7,
        "height": 1
    },
    {
        "id": "2a0e25e8b5c0b682",
        "type": "delay",
        "z": "b57434cd3c37a84c",
        "name": "delay 500ms",
        "pauseType": "delay",
        "timeout": "500",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 630,
        "y": 80,
        "wires": [
            [
                "aaed5477d8b9ded9",
                "cfe7e080e23cf834"
            ]
        ]
    },
    {
        "id": "aaed5477d8b9ded9",
        "type": "delay",
        "z": "b57434cd3c37a84c",
        "name": "5sec delay",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 830,
        "y": 80,
        "wires": [
            [
                "a5119d3e26d47f7c",
                "4c32cc655c44f777"
            ]
        ]
    },
    {
        "id": "959c962e1b102307",
        "type": "link out",
        "z": "b57434cd3c37a84c",
        "name": "fridge",
        "mode": "link",
        "links": [
            "64eeaf8b23c966c6"
        ],
        "x": 1225,
        "y": 120,
        "wires": []
    },
    {
        "id": "a5119d3e26d47f7c",
        "type": "delay",
        "z": "b57434cd3c37a84c",
        "name": "15sec delay",
        "pauseType": "delay",
        "timeout": "15",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1090,
        "y": 80,
        "wires": [
            [
                "84a60301cf1f1d3a"
            ]
        ]
    },
    {
        "id": "ea3ede14575d258e",
        "type": "link out",
        "z": "b57434cd3c37a84c",
        "name": "power source",
        "mode": "link",
        "links": [
            "64eeaf8b23c966c6"
        ],
        "x": 1745,
        "y": 120,
        "wires": []
    },
    {
        "id": "383d47a1cd09287f",
        "type": "change",
        "z": "b57434cd3c37a84c",
        "name": "switch power source to Lead",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "lead_battery",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "battery_select",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 380,
        "y": 120,
        "wires": [
            [
                "2a0e25e8b5c0b682",
                "c0d487f8f3afef97"
            ]
        ]
    },
    {
        "id": "cfe7e080e23cf834",
        "type": "change",
        "z": "b57434cd3c37a84c",
        "name": "turn on inverter",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "inverter",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 840,
        "y": 120,
        "wires": [
            [
                "35ae32fd6fdfa33c"
            ]
        ]
    },
    {
        "id": "4c32cc655c44f777",
        "type": "change",
        "z": "b57434cd3c37a84c",
        "name": "turn on fridge",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "fridge",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1100,
        "y": 120,
        "wires": [
            [
                "959c962e1b102307"
            ]
        ]
    },
    {
        "id": "504642d8cd7a45ad",
        "type": "change",
        "z": "b57434cd3c37a84c",
        "name": "switch power source to LFP",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "lfp_battery",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "battery_select",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1580,
        "y": 120,
        "wires": [
            [
                "ea3ede14575d258e"
            ]
        ]
    },
    {
        "id": "84a60301cf1f1d3a",
        "type": "switch",
        "z": "b57434cd3c37a84c",
        "name": "check source",
        "property": "switch_to_lfp",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1340,
        "y": 80,
        "wires": [
            [
                "504642d8cd7a45ad"
            ]
        ]
    },
    {
        "id": "35bdfe86887d125b",
        "type": "link out",
        "z": "b57434cd3c37a84c",
        "name": "fridge",
        "mode": "link",
        "links": [
            "64eeaf8b23c966c6"
        ],
        "x": 575,
        "y": 240,
        "wires": []
    },
    {
        "id": "177a13287c18fa73",
        "type": "delay",
        "z": "b57434cd3c37a84c",
        "name": "500ms delay",
        "pauseType": "delay",
        "timeout": "500",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 630,
        "y": 200,
        "wires": [
            [
                "415d23ce76b92d99",
                "d9f56c0796d37e27"
            ]
        ]
    },
    {
        "id": "b1789de65b4843f7",
        "type": "link out",
        "z": "b57434cd3c37a84c",
        "name": "power source",
        "mode": "link",
        "links": [
            "64eeaf8b23c966c6"
        ],
        "x": 1305,
        "y": 240,
        "wires": []
    },
    {
        "id": "a00b985e672eb268",
        "type": "change",
        "z": "b57434cd3c37a84c",
        "name": "turn off fridge",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "false",
                "tot": "bool"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "fridge",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 340,
        "y": 240,
        "wires": [
            [
                "35bdfe86887d125b",
                "177a13287c18fa73"
            ]
        ]
    },
    {
        "id": "415d23ce76b92d99",
        "type": "change",
        "z": "b57434cd3c37a84c",
        "name": "turn off inverter",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "false",
                "tot": "bool"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "inverter",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 840,
        "y": 240,
        "wires": [
            [
                "173b6bc492561a20"
            ]
        ]
    },
    {
        "id": "ed97960bc9bcbfb4",
        "type": "change",
        "z": "b57434cd3c37a84c",
        "name": "switch power source to LFP",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "lfp_battery",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "battery_select",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1140,
        "y": 240,
        "wires": [
            [
                "b1789de65b4843f7"
            ]
        ]
    },
    {
        "id": "d9f56c0796d37e27",
        "type": "delay",
        "z": "b57434cd3c37a84c",
        "name": "500ms delay",
        "pauseType": "delay",
        "timeout": "500",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 830,
        "y": 200,
        "wires": [
            [
                "ed97960bc9bcbfb4"
            ]
        ]
    },
    {
        "id": "8dec80308fb9d60e",
        "type": "switch",
        "z": "b57434cd3c37a84c",
        "name": "ON / OFF",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 160,
        "y": 180,
        "wires": [
            [
                "383d47a1cd09287f"
            ],
            [
                "a00b985e672eb268"
            ]
        ]
    },
    {
        "id": "173b6bc492561a20",
        "type": "link out",
        "z": "b57434cd3c37a84c",
        "name": "inverter",
        "mode": "link",
        "links": [
            "64eeaf8b23c966c6"
        ],
        "x": 965,
        "y": 240,
        "wires": []
    },
    {
        "id": "35ae32fd6fdfa33c",
        "type": "link out",
        "z": "b57434cd3c37a84c",
        "name": "inverter",
        "mode": "link",
        "links": [
            "64eeaf8b23c966c6"
        ],
        "x": 965,
        "y": 120,
        "wires": []
    },
    {
        "id": "c0d487f8f3afef97",
        "type": "link out",
        "z": "b57434cd3c37a84c",
        "name": "power source",
        "mode": "link",
        "links": [
            "64eeaf8b23c966c6"
        ],
        "x": 575,
        "y": 120,
        "wires": []
    },
    {
        "id": "64eeaf8b23c966c6",
        "type": "link in",
        "z": "b57434cd3c37a84c",
        "name": "Hardware output",
        "links": [
            "173b6bc492561a20",
            "35ae32fd6fdfa33c",
            "35bdfe86887d125b",
            "959c962e1b102307",
            "b1789de65b4843f7",
            "c0d487f8f3afef97",
            "ea3ede14575d258e"
        ],
        "x": 1835,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "119859a577954569",
        "type": "comment",
        "z": "b57434cd3c37a84c",
        "name": "OFF",
        "info": "",
        "x": 150,
        "y": 240,
        "wires": []
    },
    {
        "id": "9e79a0e52adcfbce",
        "type": "comment",
        "z": "b57434cd3c37a84c",
        "name": "ON",
        "info": "",
        "x": 150,
        "y": 120,
        "wires": []
    },
    {
        "id": "3f11446ab0ac521c",
        "type": "delay",
        "z": "85860d2069ad95cd",
        "name": "delay 500ms",
        "pauseType": "delay",
        "timeout": "500",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 670,
        "y": 80,
        "wires": [
            [
                "7ec654bf58226704",
                "29846167b217dff6"
            ]
        ]
    },
    {
        "id": "7ec654bf58226704",
        "type": "delay",
        "z": "85860d2069ad95cd",
        "name": "1sec delay",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 870,
        "y": 80,
        "wires": [
            [
                "f2db65cdf6e9218c"
            ]
        ]
    },
    {
        "id": "c2dfc55fe818d2d3",
        "type": "link out",
        "z": "85860d2069ad95cd",
        "name": "fridge",
        "mode": "link",
        "links": [
            "2ca40f854aa53bc4"
        ],
        "x": 1265,
        "y": 120,
        "wires": []
    },
    {
        "id": "4a5b49ec6b0b88c8",
        "type": "change",
        "z": "85860d2069ad95cd",
        "name": "switch power source to Lead",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "lead_battery",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "battery_select",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 420,
        "y": 120,
        "wires": [
            [
                "3f11446ab0ac521c",
                "5d78525fcec731ec"
            ]
        ]
    },
    {
        "id": "29846167b217dff6",
        "type": "change",
        "z": "85860d2069ad95cd",
        "name": "turn on inverter",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "inverter",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 880,
        "y": 120,
        "wires": [
            [
                "5d77338698d792a2"
            ]
        ]
    },
    {
        "id": "f2db65cdf6e9218c",
        "type": "change",
        "z": "85860d2069ad95cd",
        "name": "turn on charger",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "charger",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1140,
        "y": 120,
        "wires": [
            [
                "c2dfc55fe818d2d3"
            ]
        ]
    },
    {
        "id": "e7c6ee8b7d92b0ef",
        "type": "link out",
        "z": "85860d2069ad95cd",
        "name": "fridge",
        "mode": "link",
        "links": [
            "2ca40f854aa53bc4"
        ],
        "x": 615,
        "y": 240,
        "wires": []
    },
    {
        "id": "f4a802d2c1617c67",
        "type": "delay",
        "z": "85860d2069ad95cd",
        "name": "500ms delay",
        "pauseType": "delay",
        "timeout": "500",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 670,
        "y": 200,
        "wires": [
            [
                "fc7b60240458cd60",
                "41b1eeafb3de5f7f"
            ]
        ]
    },
    {
        "id": "8727b486fc8278ab",
        "type": "link out",
        "z": "85860d2069ad95cd",
        "name": "power source",
        "mode": "link",
        "links": [
            "2ca40f854aa53bc4"
        ],
        "x": 1345,
        "y": 240,
        "wires": []
    },
    {
        "id": "2cd36db492e9b42c",
        "type": "change",
        "z": "85860d2069ad95cd",
        "name": "turn off charger",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "false",
                "tot": "bool"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "charger",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 380,
        "y": 240,
        "wires": [
            [
                "e7c6ee8b7d92b0ef",
                "f4a802d2c1617c67"
            ]
        ]
    },
    {
        "id": "fc7b60240458cd60",
        "type": "change",
        "z": "85860d2069ad95cd",
        "name": "turn off inverter",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "false",
                "tot": "bool"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "inverter",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 880,
        "y": 240,
        "wires": [
            [
                "3774778b55522af7"
            ]
        ]
    },
    {
        "id": "9a6ab8bb45491ff0",
        "type": "change",
        "z": "85860d2069ad95cd",
        "name": "switch power source to LFP",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "lfp_battery",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "battery_select",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1180,
        "y": 240,
        "wires": [
            [
                "8727b486fc8278ab"
            ]
        ]
    },
    {
        "id": "41b1eeafb3de5f7f",
        "type": "delay",
        "z": "85860d2069ad95cd",
        "name": "500ms delay",
        "pauseType": "delay",
        "timeout": "500",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 870,
        "y": 200,
        "wires": [
            [
                "9a6ab8bb45491ff0"
            ]
        ]
    },
    {
        "id": "eb94063d41bc944d",
        "type": "switch",
        "z": "85860d2069ad95cd",
        "name": "ON / OFF",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 200,
        "y": 180,
        "wires": [
            [
                "4a5b49ec6b0b88c8"
            ],
            [
                "2cd36db492e9b42c"
            ]
        ]
    },
    {
        "id": "3774778b55522af7",
        "type": "link out",
        "z": "85860d2069ad95cd",
        "name": "inverter",
        "mode": "link",
        "links": [
            "2ca40f854aa53bc4"
        ],
        "x": 1005,
        "y": 240,
        "wires": []
    },
    {
        "id": "5d77338698d792a2",
        "type": "link out",
        "z": "85860d2069ad95cd",
        "name": "inverter",
        "mode": "link",
        "links": [
            "2ca40f854aa53bc4"
        ],
        "x": 1005,
        "y": 120,
        "wires": []
    },
    {
        "id": "5d78525fcec731ec",
        "type": "link out",
        "z": "85860d2069ad95cd",
        "name": "power source",
        "mode": "link",
        "links": [
            "2ca40f854aa53bc4"
        ],
        "x": 615,
        "y": 120,
        "wires": []
    },
    {
        "id": "2ca40f854aa53bc4",
        "type": "link in",
        "z": "85860d2069ad95cd",
        "name": "Hardware output",
        "links": [
            "3774778b55522af7",
            "5d77338698d792a2",
            "e7c6ee8b7d92b0ef",
            "c2dfc55fe818d2d3",
            "8727b486fc8278ab",
            "5d78525fcec731ec",
            "dbb0ddc0efc5c418",
            "c43928476bd19955",
            "8e9f80a57ce216b7",
            "0d17f75a6ec0ce30",
            "bd63dd7cda17786d",
            "43d6589324eeaee4",
            "efef321098361e9c"
        ],
        "x": 1435,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "637fe192e759c089",
        "type": "comment",
        "z": "85860d2069ad95cd",
        "name": "OFF",
        "info": "",
        "x": 190,
        "y": 240,
        "wires": []
    },
    {
        "id": "af4a5c51dd2f13eb",
        "type": "comment",
        "z": "85860d2069ad95cd",
        "name": "ON",
        "info": "",
        "x": 190,
        "y": 120,
        "wires": []
    },
    {
        "id": "7289bb0370b0eeff",
        "type": "delay",
        "z": "bec2118860bb84ba",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": true,
        "outputs": 2,
        "x": 470,
        "y": 160,
        "wires": [
            [
                "daf4b0c59703337f"
            ],
            [
                "674f53adfc698976"
            ]
        ]
    },
    {
        "id": "b9b3236fb564f861",
        "type": "delay",
        "z": "bec2118860bb84ba",
        "name": "",
        "pauseType": "delayv",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 840,
        "y": 120,
        "wires": [
            [
                "674f53adfc698976"
            ]
        ]
    },
    {
        "id": "b2bbb41eaf92958d",
        "type": "delay",
        "z": "bec2118860bb84ba",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": true,
        "outputs": 1,
        "x": 1170,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "2ca9afd17404e819",
        "type": "change",
        "z": "bec2118860bb84ba",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "rate",
                "pt": "msg",
                "to": "threshold",
                "tot": "env"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 290,
        "y": 160,
        "wires": [
            [
                "7289bb0370b0eeff"
            ]
        ]
    },
    {
        "id": "daf4b0c59703337f",
        "type": "change",
        "z": "bec2118860bb84ba",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "delay",
                "pt": "msg",
                "to": "threshold",
                "tot": "env"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 660,
        "y": 120,
        "wires": [
            [
                "b9b3236fb564f861"
            ]
        ]
    },
    {
        "id": "674f53adfc698976",
        "type": "function",
        "z": "bec2118860bb84ba",
        "name": "double rate",
        "func": "var threshold = env.get(\"threshold\");\nmsg.rate = threshold*2;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 200,
        "wires": [
            [
                "b2bbb41eaf92958d"
            ]
        ]
    },
    {
        "id": "a0480f9bec6d0d26",
        "type": "mysql",
        "z": "d8f3724deb76e0db",
        "mydb": "9accbd4c3bdcd845",
        "name": "",
        "x": 380,
        "y": 80,
        "wires": [
            [
                "81760f68e8cb2a1a"
            ]
        ]
    },
    {
        "id": "81760f68e8cb2a1a",
        "type": "function",
        "z": "d8f3724deb76e0db",
        "name": "output parser",
        "func": "var setting = [flow.get(\"setting\")];\n\nmsg.payload = msg.payload[0][setting];\nmsg.topic = setting;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "9a9241d78a196ff1",
        "type": "function",
        "z": "d8f3724deb76e0db",
        "name": "input parser",
        "func": "\nmsg.topic = \"SELECT \" + msg.payload +\" FROM settings WHERE id=1;\";\nflow.set (\"setting\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 80,
        "wires": [
            [
                "a0480f9bec6d0d26"
            ]
        ]
    },
    {
        "id": "522a28de03c194b1",
        "type": "serial request",
        "z": "417a6a1d3a391809",
        "name": "MPPT request",
        "serial": "594a8a527370c352",
        "x": 400,
        "y": 80,
        "wires": [
            [
                "de36f2d1d965bb8e"
            ]
        ]
    },
    {
        "id": "b60a37816360662b",
        "type": "function",
        "z": "417a6a1d3a391809",
        "name": "checksum builder",
        "func": "var string = msg.payload;\n\n// checksum calculation\n//split string in bytes array\nvar string_array = string.substring(1).match(/.{1,2}/g);\nstring_array.push(string.substring(0,1));\n// add every bytes togheter\nvar sum = 0;\nfor(var i=0; i < string_array.length; i++){\n    sum = sum + parseInt(string_array[i], 16);\n}\n// subtract sum from 0x55 and convert it to string\nvar checksum = ((((85 - sum) % 256) + 256) % 256).toString(16).toUpperCase();\n\n\nmsg.payload = ':' + string + checksum + '\\n';\n//msg.payload = Buffer.from(msg.payload, 'utf8');\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 80,
        "wires": [
            [
                "522a28de03c194b1"
            ]
        ]
    },
    {
        "id": "de36f2d1d965bb8e",
        "type": "function",
        "z": "417a6a1d3a391809",
        "name": "checksum tester",
        "func": "// first output: command value\n// second output: message\n// third output: true if data is corrupted\n\nvar string = msg.payload.toString();\n//msg.payload = string;\n//return[null, msg, null];\n\n// take out start and stop signs (: and \\n)\nstring = string.substring(string.indexOf(\":\")+1, string.length-1);\n// get checksum (last byte)\nvar checksum = string.substring(string.length-2);\n\n// checksum calculation\n//split string in bytes array\nvar string_array = string.substring(1, string.length-2).match(/.{1,2}/g);\nstring_array.push(string.substring(0,1));\n// add every bytes togheter\nvar sum = 0;\nfor(var i=0; i < string_array.length; i++){\n    sum = sum + parseInt(string_array[i], 16);\n}\n// subtract sum from 0x55 and convert it to string all caps\nvar myChecksum = ((((85 - sum) % 256) + 256) % 256).toString(16).toUpperCase();\n\n// check data integrity\nvar isDataCorrupted;\nif(myChecksum == checksum){\n    // command\n    var msg1 = {payload: string.substring(0,1)};\n    // data\n    var msg2 = {payload: string.substring(1, string.length-2)};\n    return[msg1, msg2, null];\n}\nelse {\n    return[null, null, {payload: \"mppt hex message corrupted\"}];\n}\n",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 80,
        "wires": [
            [],
            [],
            [
                "c9495acd114b2c47"
            ]
        ]
    },
    {
        "id": "c9495acd114b2c47",
        "type": "debug",
        "z": "417a6a1d3a391809",
        "name": "data corrupted",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 840,
        "y": 120,
        "wires": []
    },
    {
        "id": "225ac2159b67138b",
        "type": "function",
        "z": "d4e4f65b33f57c36",
        "name": "output parser",
        "func": "var setting = [flow.get(\"setting\")];\n\nmsg.payload = msg.payload[0][setting];\nmsg.topic = setting;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "aae203e2a664a103",
        "type": "function",
        "z": "d4e4f65b33f57c36",
        "name": "input parser",
        "func": "\nmsg.topic = \"SELECT \" + msg.payload +\" FROM settings WHERE id=1;\";\nflow.set (\"setting\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "ac73327ec1e94ec3",
        "type": "function",
        "z": "281e43440f4d8703",
        "name": "checksum builder",
        "func": "var string = msg.payload;\n\n// checksum calculation\n//split string in bytes array\nvar string_array = string.substring(1).match(/.{1,2}/g);\nstring_array.push(string.substring(0,1));\n// add every bytes togheter\nvar sum = 0;\nfor(var i=0; i < string_array.length; i++){\n    sum = sum + parseInt(string_array[i], 16);\n}\n// subtract sum from 0x55 and convert it to string\nvar checksum = ((((85 - sum) % 256) + 256) % 256).toString(16).toUpperCase();\n\n\nmsg.payload = ':' + string + checksum + '\\n';\n//msg.payload = Buffer.from(msg.payload, 'utf8');\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "51453b2083ca9ac6",
        "type": "function",
        "z": "281e43440f4d8703",
        "name": "checksum tester",
        "func": "// first output: command value\n// second output: message\n// third output: true if data is corrupted\n\nvar string = msg.payload.toString();\n//msg.payload = string;\n//return[null, msg, null];\n\n// take out start and stop signs (: and \\n)\nstring = string.substring(string.indexOf(\":\")+1, string.length-1);\n// get checksum (last byte)\nvar checksum = string.substring(string.length-2);\n\n// checksum calculation\n//split string in bytes array\nvar string_array = string.substring(1, string.length-2).match(/.{1,2}/g);\nstring_array.push(string.substring(0,1));\n// add every bytes togheter\nvar sum = 0;\nfor(var i=0; i < string_array.length; i++){\n    sum = sum + parseInt(string_array[i], 16);\n}\n// subtract sum from 0x55 and convert it to string all caps\nvar myChecksum = ((((85 - sum) % 256) + 256) % 256).toString(16).toUpperCase();\n\n// check data integrity\nvar isDataCorrupted;\nif(myChecksum == checksum){\n    // command\n    var msg1 = {payload: string.substring(0,1)};\n    // data\n    var msg2 = {payload: string.substring(1, string.length-2)};\n    return[msg1, msg2, null];\n}\nelse {\n    return[null, null, {payload: \"mppt hex message corrupted\"}];\n}\n",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 80,
        "wires": [
            [],
            [],
            [
                "1f340f01d3b4692b"
            ]
        ]
    },
    {
        "id": "1f340f01d3b4692b",
        "type": "debug",
        "z": "281e43440f4d8703",
        "name": "data corrupted",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 840,
        "y": 120,
        "wires": []
    },
    {
        "id": "29b2917c6d628102",
        "type": "function",
        "z": "07e2886f15f7b5a8",
        "name": "Inverter Logic",
        "func": "/**\n * Inverter indirect needed for fridge and victron charger\n * Can also be manually used with the 230V outlet\n * This node is the only place where the inverter should be turned on or off\n */\n\nconst values = flow.get(\"values\");\n\nif(values.victronCharger || values.fridge || values.manualSwitch){\n    //turn on inverter\n    msg.payload = true;\n} else{\n    // turn off inverter\n    msg.payload = false\n}\nflow.set(\"values.inverter\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1280,
        "y": 420,
        "wires": [
            [
                "7e3ba14a8b171947",
                "5e60452f0ec113f8",
                "f8aff7f4638c85c0"
            ]
        ]
    },
    {
        "id": "7c0daac5aac91389",
        "type": "function",
        "z": "07e2886f15f7b5a8",
        "name": "Fridge Logic",
        "func": "/**\n * the fridge should be turned on and off only in this flow\n */\nconst algorithm = flow.get(\"fridgeAlgorithm\");\nconst fridgeState = flow.get(\"values.fridge\");\nmsg.payload = fridgeState;\n\n// main logic\nswitch (algorithm) {\n    // always on\n    case \"on\":\n        if (fridgeState) {\n            return;\n        }\n        msg.payload = true;\n        break;\n    // always off\n    case \"off\":\n        if (!fridgeState) {\n            return;\n        }\n        msg.payload = false;\n        break;\n    // low and high temp threshold\n    case \"auto\":\n        let temp = flow.get(\"values.fridgeTemp\");\n        if (temp >= flow.get(\"values.fridgeUpThreshold\")) {\n            //turn on fridge\n            if (fridgeState) {\n                return;\n            }\n            msg.payload = true;\n        }\n        else if (temp < flow.get(\"values.fridgeDownThreshold\")) {\n            //turn off fridge\n            if (!fridgeState) {\n                return;\n            }\n            msg.payload = false;\n        }\n        //msg.payload = !msg.payload;\n        //msg.temp = temp;\n        break;\n}\nflow.set(\"values.fridge\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 340,
        "wires": [
            [
                "a585810cb088b4b6",
                "29b2917c6d628102"
            ]
        ]
    },
    {
        "id": "f534d6a9f2aeb697",
        "type": "function",
        "z": "07e2886f15f7b5a8",
        "name": "Victron Charger Logic",
        "func": "/**\n * the charger should be turned on and off only in this flow\n */\nconst algorithm = flow.get(\"victronChargerAlgorithm\");\nconst chargerState = flow.get(\"values.VictronCharger\");\nmsg.payload = chargerState;\n\n// main logic\nswitch (algorithm) {\n    // always on\n    case \"on\":\n        if (chargerState) {\n            return;\n        }\n        msg.payload = true;\n        break;\n    // always off\n    case \"off\":\n        if (!chargerState) {\n            //return;\n        }\n        msg.payload = false;\n        break;\n    // only if motor is running\n    case \"auto\":\n        if (chargerState === flow.get(\"values.motorState\")){\n            return;\n        }\n        msg.payload = flow.get(\"values.motorState\");\n        break;\n}\nflow.set(\"values.victronCharger\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 440,
        "wires": [
            [
                "6e49a393671e42c7",
                "29b2917c6d628102"
            ]
        ]
    },
    {
        "id": "9438e8fbd485d349",
        "type": "function",
        "z": "07e2886f15f7b5a8",
        "name": "Init Flow variables",
        "func": "// All code is in the on start section",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\n\nflow.set(\"values\",  {\n    victronCharger: false,\n    charger: false,\n    fridge: false,\n    manualSwitch: false,\n    fridgeTemp: 0,\n    fridgeUpThreshold: 10,\n    fridgeDownThreshold:  2,\n    motorVoltage: 0,\n    motorState: false,\n    motorUpThreshold: 13.0,\n    motorDownThreshold: 12.0\n});\n\nflow.set(\"fridgeAlgorithm\", \"off\");\nflow.set(\"victronChargerAlgorithm\", \"off\");\nflow.set(\"chargerAlgorithm\", \"off\");",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "30381e2c864a3c6c",
        "type": "comment",
        "z": "07e2886f15f7b5a8",
        "name": "",
        "info": "The Gpio nodes needs to be triggered at reboot",
        "x": 520,
        "y": 220,
        "wires": []
    },
    {
        "id": "9d43bbd457de7af2",
        "type": "ui_dropdown",
        "z": "07e2886f15f7b5a8",
        "name": "",
        "label": "Fridge settings",
        "tooltip": "",
        "place": "Off",
        "group": "90e9183b2c5c9fcf",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "On",
                "value": "on",
                "type": "str"
            },
            {
                "label": "Off",
                "value": "off",
                "type": "str"
            },
            {
                "label": "Auto(temp sensor)",
                "value": "auto",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "x": 500,
        "y": 320,
        "wires": [
            [
                "df59e8a7de96768c"
            ]
        ]
    },
    {
        "id": "df59e8a7de96768c",
        "type": "change",
        "z": "07e2886f15f7b5a8",
        "name": "update state",
        "rules": [
            {
                "t": "set",
                "p": "fridgeAlgorithm",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 670,
        "y": 320,
        "wires": [
            [
                "7c0daac5aac91389"
            ]
        ]
    },
    {
        "id": "9c2695a5dc7e7258",
        "type": "ui_slider",
        "z": "07e2886f15f7b5a8",
        "d": true,
        "name": "",
        "label": "Fridge Temperature",
        "tooltip": "",
        "group": "",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "outs": "end",
        "topic": "topic",
        "topicType": "msg",
        "min": "-10",
        "max": "30",
        "step": 1,
        "className": "",
        "x": 350,
        "y": 60,
        "wires": [
            [
                "4866bcedbab0a4bb"
            ]
        ]
    },
    {
        "id": "4866bcedbab0a4bb",
        "type": "change",
        "z": "07e2886f15f7b5a8",
        "name": "update state",
        "rules": [
            {
                "t": "set",
                "p": "values.fridgeTemp",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 670,
        "y": 360,
        "wires": [
            [
                "7c0daac5aac91389"
            ]
        ]
    },
    {
        "id": "510db5ba875c34a1",
        "type": "inject",
        "z": "07e2886f15f7b5a8",
        "name": "temp sensor gpio",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 150,
        "y": 60,
        "wires": [
            [
                "9c2695a5dc7e7258"
            ]
        ]
    },
    {
        "id": "e60a9c2396ad7a88",
        "type": "ui_led",
        "z": "07e2886f15f7b5a8",
        "order": 4,
        "group": "90e9183b2c5c9fcf",
        "width": 0,
        "height": 0,
        "label": "Fridge",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "colorForValue": [
            {
                "color": "#919191",
                "value": "false",
                "valueType": "bool"
            },
            {
                "color": "#008000",
                "value": "true",
                "valueType": "bool"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showGlow": false,
        "name": "led fridge",
        "x": 1500,
        "y": 300,
        "wires": []
    },
    {
        "id": "0abe134392c922c0",
        "type": "ui_led",
        "z": "07e2886f15f7b5a8",
        "order": 5,
        "group": "90e9183b2c5c9fcf",
        "width": 0,
        "height": 0,
        "label": "Victron Charger",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "colorForValue": [
            {
                "color": "#919191",
                "value": "false",
                "valueType": "bool"
            },
            {
                "color": "#008000",
                "value": "true",
                "valueType": "bool"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showGlow": false,
        "name": "led victron charger",
        "x": 1530,
        "y": 580,
        "wires": []
    },
    {
        "id": "7e3ba14a8b171947",
        "type": "ui_led",
        "z": "07e2886f15f7b5a8",
        "order": 7,
        "group": "90e9183b2c5c9fcf",
        "width": 0,
        "height": 0,
        "label": "Inverter",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "colorForValue": [
            {
                "color": "#919191",
                "value": "false",
                "valueType": "bool"
            },
            {
                "color": "#008000",
                "value": "true",
                "valueType": "bool"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showGlow": false,
        "name": "led inverter",
        "x": 1510,
        "y": 400,
        "wires": []
    },
    {
        "id": "b7029d0b0ad0057c",
        "type": "ui_switch",
        "z": "07e2886f15f7b5a8",
        "d": true,
        "name": "",
        "label": "inverter switch",
        "tooltip": "",
        "group": "",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 340,
        "y": 100,
        "wires": [
            [
                "25f360e0f9717d27"
            ]
        ]
    },
    {
        "id": "25f360e0f9717d27",
        "type": "change",
        "z": "07e2886f15f7b5a8",
        "name": "update state",
        "rules": [
            {
                "t": "set",
                "p": "values.manualSwitch",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 670,
        "y": 400,
        "wires": [
            [
                "29b2917c6d628102"
            ]
        ]
    },
    {
        "id": "a585810cb088b4b6",
        "type": "delay",
        "z": "07e2886f15f7b5a8",
        "name": "",
        "pauseType": "delay",
        "timeout": "500",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1270,
        "y": 320,
        "wires": [
            [
                "e60a9c2396ad7a88",
                "efd5d4e7fbf54930"
            ]
        ]
    },
    {
        "id": "6e49a393671e42c7",
        "type": "delay",
        "z": "07e2886f15f7b5a8",
        "name": "",
        "pauseType": "delay",
        "timeout": "500",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1270,
        "y": 560,
        "wires": [
            [
                "0abe134392c922c0",
                "2fc279ab6f85b736"
            ]
        ]
    },
    {
        "id": "489678536836b2ba",
        "type": "ui_slider",
        "z": "07e2886f15f7b5a8",
        "d": true,
        "name": "",
        "label": "Motor voltage",
        "tooltip": "",
        "group": "",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": true,
        "outs": "end",
        "topic": "topic",
        "topicType": "msg",
        "min": "10",
        "max": "14.5",
        "step": "0.1",
        "className": "",
        "x": 340,
        "y": 180,
        "wires": [
            [
                "35ede95b38605a88"
            ]
        ]
    },
    {
        "id": "92f5ad83517c04b5",
        "type": "ui_dropdown",
        "z": "07e2886f15f7b5a8",
        "name": "",
        "label": "Victron charger",
        "tooltip": "",
        "place": "Off",
        "group": "90e9183b2c5c9fcf",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "On",
                "value": "on",
                "type": "str"
            },
            {
                "label": "Off",
                "value": "off",
                "type": "str"
            },
            {
                "label": "Auto(motor running)",
                "value": "auto",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "x": 500,
        "y": 440,
        "wires": [
            [
                "01056d4164862f47"
            ]
        ]
    },
    {
        "id": "f95ba2596b2a9728",
        "type": "function",
        "z": "07e2886f15f7b5a8",
        "name": "Motor logic",
        "func": "let voltage = flow.get(\"values.motorVoltage\");\nlet motorState = flow.get(\"values.motorState\");\nmsg.payload = motorState;\nif (voltage >= flow.get(\"values.motorUpThreshold\")) {\n    //motor is running\n    if (motorState) {\n        return;\n    }\n    msg.payload = true;\n}\nelse if (voltage < flow.get(\"values.motorDownThreshold\")) {\n    //motor is not running\n    if (!motorState) {\n        return;\n    }\n    msg.payload = false;\n}\nflow.set(\"values.motorState\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 480,
        "wires": [
            [
                "f534d6a9f2aeb697",
                "87b9823c2d2d6a84"
            ]
        ]
    },
    {
        "id": "87b9823c2d2d6a84",
        "type": "ui_led",
        "z": "07e2886f15f7b5a8",
        "order": 8,
        "group": "90e9183b2c5c9fcf",
        "width": 0,
        "height": 0,
        "label": "Motor",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "colorForValue": [
            {
                "color": "#919191",
                "value": "false",
                "valueType": "bool"
            },
            {
                "color": "#008000",
                "value": "true",
                "valueType": "bool"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showGlow": false,
        "name": "led motor",
        "x": 1500,
        "y": 480,
        "wires": []
    },
    {
        "id": "35ede95b38605a88",
        "type": "change",
        "z": "07e2886f15f7b5a8",
        "name": "update state",
        "rules": [
            {
                "t": "set",
                "p": "values.motorVoltage",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 670,
        "y": 480,
        "wires": [
            [
                "f95ba2596b2a9728"
            ]
        ]
    },
    {
        "id": "01056d4164862f47",
        "type": "change",
        "z": "07e2886f15f7b5a8",
        "name": "update state",
        "rules": [
            {
                "t": "set",
                "p": "victronChargerAlgorithm",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 670,
        "y": 440,
        "wires": [
            [
                "f534d6a9f2aeb697"
            ]
        ]
    },
    {
        "id": "b1ff4b78715f198f",
        "type": "inject",
        "z": "07e2886f15f7b5a8",
        "name": "switch gpio",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 170,
        "y": 100,
        "wires": [
            [
                "b7029d0b0ad0057c"
            ]
        ]
    },
    {
        "id": "41b442638e448f25",
        "type": "inject",
        "z": "07e2886f15f7b5a8",
        "name": "motor voltage gpio",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 150,
        "y": 180,
        "wires": [
            [
                "489678536836b2ba"
            ]
        ]
    },
    {
        "id": "0579c567d8fd428e",
        "type": "ui_dropdown",
        "z": "07e2886f15f7b5a8",
        "name": "",
        "label": "Auxiliary Charger",
        "tooltip": "",
        "place": "Off",
        "group": "90e9183b2c5c9fcf",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "On",
                "value": "on",
                "type": "str"
            },
            {
                "label": "Off",
                "value": "off",
                "type": "str"
            },
            {
                "label": "Auto(when inverter on)",
                "value": "auto",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "x": 490,
        "y": 520,
        "wires": [
            [
                "9ca41c44d2322bed"
            ]
        ]
    },
    {
        "id": "9ca41c44d2322bed",
        "type": "change",
        "z": "07e2886f15f7b5a8",
        "name": "update state",
        "rules": [
            {
                "t": "set",
                "p": "chargerAlgorithm",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 670,
        "y": 520,
        "wires": [
            [
                "f8aff7f4638c85c0"
            ]
        ]
    },
    {
        "id": "f8aff7f4638c85c0",
        "type": "function",
        "z": "07e2886f15f7b5a8",
        "name": "Charger Logic",
        "func": "/**\n * the charger should be turned on and off only in this flow\n */\nconst algorithm = flow.get(\"chargerAlgorithm\");\nconst chargerState = flow.get(\"values.charger\");\nmsg.payload = chargerState;\n\n// main logic\nswitch (algorithm) {\n    // always on\n    case \"on\":\n        if (chargerState) {\n            return;\n        }\n        msg.payload = true;\n        break;\n    // always off\n    case \"off\":\n        if (!chargerState) {\n            //return;\n        }\n        msg.payload = false;\n        break;\n    // only if inverter is on\n    case \"auto\":\n        if (chargerState === flow.get(\"values.inverter\")){\n            return;\n        }\n        msg.payload = flow.get(\"values.inverter\");\n        break;\n}\nflow.set(\"values.charger\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 620,
        "wires": [
            [
                "accf6507cfd1f11b",
                "d114f92c3f4eab4d"
            ]
        ]
    },
    {
        "id": "accf6507cfd1f11b",
        "type": "ui_led",
        "z": "07e2886f15f7b5a8",
        "order": 6,
        "group": "90e9183b2c5c9fcf",
        "width": 0,
        "height": 0,
        "label": "Auxiliary Charger",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "colorForValue": [
            {
                "color": "#919191",
                "value": "false",
                "valueType": "bool"
            },
            {
                "color": "#008000",
                "value": "true",
                "valueType": "bool"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showGlow": false,
        "name": "led auxiliary charger",
        "x": 1540,
        "y": 660,
        "wires": []
    },
    {
        "id": "f41b2d06c8ecc36a",
        "type": "inject",
        "z": "07e2886f15f7b5a8",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "off",
        "payloadType": "str",
        "x": 250,
        "y": 320,
        "wires": [
            [
                "9d43bbd457de7af2"
            ]
        ]
    },
    {
        "id": "82ea03df65245c7e",
        "type": "inject",
        "z": "07e2886f15f7b5a8",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "off",
        "payloadType": "str",
        "x": 250,
        "y": 440,
        "wires": [
            [
                "92f5ad83517c04b5"
            ]
        ]
    },
    {
        "id": "efd5d4e7fbf54930",
        "type": "function",
        "z": "07e2886f15f7b5a8",
        "name": "Fridge",
        "func": "//turn on\nif(msg.payload){\n    global.set(\"output_state.fridge\", true);\n    return[{payload:true}, {payload:false}, null];\n}\n// turn off\nelse {\n    global.set(\"output_state.fridge\", false);\n    return[null, {payload:false}, {payload:true}];\n}",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1810,
        "y": 340,
        "wires": [
            [
                "85a14e6feb39ac99"
            ],
            [
                "766f75a1ac2e1486"
            ],
            [
                "63d00e61fc66b270"
            ]
        ]
    },
    {
        "id": "766f75a1ac2e1486",
        "type": "delay",
        "z": "07e2886f15f7b5a8",
        "name": "",
        "pauseType": "delay",
        "timeout": "100",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 2010,
        "y": 340,
        "wires": [
            [
                "85a14e6feb39ac99",
                "63d00e61fc66b270"
            ]
        ]
    },
    {
        "id": "85a14e6feb39ac99",
        "type": "rpi-gpio out",
        "z": "07e2886f15f7b5a8",
        "name": "fridge enable",
        "pin": "23",
        "set": true,
        "level": "0",
        "freq": "",
        "out": "out",
        "bcm": true,
        "x": 2210,
        "y": 280,
        "wires": []
    },
    {
        "id": "63d00e61fc66b270",
        "type": "rpi-gpio out",
        "z": "07e2886f15f7b5a8",
        "name": "fridge disable",
        "pin": "22",
        "set": true,
        "level": "0",
        "freq": "",
        "out": "out",
        "bcm": true,
        "x": 2220,
        "y": 400,
        "wires": []
    },
    {
        "id": "2fc279ab6f85b736",
        "type": "function",
        "z": "07e2886f15f7b5a8",
        "name": "Victron Charger",
        "func": "//turn on\nif(msg.payload){\n    global.set(\"output_state.charger\", true);\n    return[{payload:true}, {payload:false}, null];\n}\n// turn off\nelse {\n    global.set(\"output_state.charger\", false);\n    return[null, {payload:false}, {payload:true}];\n}",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1840,
        "y": 660,
        "wires": [
            [
                "43bfdb3a58e6deec"
            ],
            [
                "79e4758819c53762"
            ],
            [
                "6f64c1848dc98079"
            ]
        ]
    },
    {
        "id": "79e4758819c53762",
        "type": "delay",
        "z": "07e2886f15f7b5a8",
        "name": "",
        "pauseType": "delay",
        "timeout": "100",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 2010,
        "y": 660,
        "wires": [
            [
                "43bfdb3a58e6deec",
                "6f64c1848dc98079"
            ]
        ]
    },
    {
        "id": "5e60452f0ec113f8",
        "type": "function",
        "z": "07e2886f15f7b5a8",
        "name": "Inverter",
        "func": "//turn on\nif(msg.payload){\n    global.set(\"output_state.inverter\", true);\n    return[{payload:true}, {payload:false}, null];\n}\n// turn off\nelse {\n    global.set(\"output_state.inverter\", false);\n    return[null, {payload:false}, {payload:true}];\n}",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1820,
        "y": 500,
        "wires": [
            [
                "f8f451593a3b26cf"
            ],
            [
                "0b5a9e789ca032d4"
            ],
            [
                "94e366d488a93e6a"
            ]
        ]
    },
    {
        "id": "0b5a9e789ca032d4",
        "type": "delay",
        "z": "07e2886f15f7b5a8",
        "name": "",
        "pauseType": "delay",
        "timeout": "100",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 2010,
        "y": 500,
        "wires": [
            [
                "f8f451593a3b26cf",
                "94e366d488a93e6a"
            ]
        ]
    },
    {
        "id": "43bfdb3a58e6deec",
        "type": "rpi-gpio out",
        "z": "07e2886f15f7b5a8",
        "name": "charger enable",
        "pin": "8",
        "set": true,
        "level": "0",
        "freq": "",
        "out": "out",
        "bcm": true,
        "x": 2220,
        "y": 600,
        "wires": []
    },
    {
        "id": "6f64c1848dc98079",
        "type": "rpi-gpio out",
        "z": "07e2886f15f7b5a8",
        "name": "charger disable",
        "pin": "25",
        "set": true,
        "level": "0",
        "freq": "",
        "out": "out",
        "bcm": true,
        "x": 2220,
        "y": 720,
        "wires": []
    },
    {
        "id": "f8f451593a3b26cf",
        "type": "rpi-gpio out",
        "z": "07e2886f15f7b5a8",
        "name": "inverter enable",
        "pin": "18",
        "set": true,
        "level": "0",
        "freq": "",
        "out": "out",
        "bcm": true,
        "x": 2220,
        "y": 440,
        "wires": []
    },
    {
        "id": "94e366d488a93e6a",
        "type": "rpi-gpio out",
        "z": "07e2886f15f7b5a8",
        "name": "inverter disable",
        "pin": "17",
        "set": true,
        "level": "0",
        "freq": "",
        "out": "out",
        "bcm": true,
        "x": 2220,
        "y": 560,
        "wires": []
    },
    {
        "id": "1139318daef789ed",
        "type": "rpi-gpio out",
        "z": "07e2886f15f7b5a8",
        "name": "inverter source sel",
        "pin": "24",
        "set": true,
        "level": "0",
        "freq": "",
        "out": "out",
        "bcm": true,
        "x": 2230,
        "y": 820,
        "wires": []
    },
    {
        "id": "6f6a1e6dc1062fba",
        "type": "change",
        "z": "07e2886f15f7b5a8",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "fridge_temp",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 500,
        "y": 360,
        "wires": [
            [
                "4866bcedbab0a4bb"
            ]
        ]
    },
    {
        "id": "b21910d0deec9151",
        "type": "inject",
        "z": "07e2886f15f7b5a8",
        "name": "trigger",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 260,
        "y": 360,
        "wires": [
            [
                "6f6a1e6dc1062fba"
            ]
        ]
    },
    {
        "id": "1f065493798dca97",
        "type": "change",
        "z": "07e2886f15f7b5a8",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "switch_living_room",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 500,
        "y": 400,
        "wires": [
            [
                "25f360e0f9717d27"
            ]
        ]
    },
    {
        "id": "f2c3a55cfab1cc4a",
        "type": "inject",
        "z": "07e2886f15f7b5a8",
        "name": "trigger",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 260,
        "y": 400,
        "wires": [
            [
                "1f065493798dca97"
            ]
        ]
    },
    {
        "id": "fe8003b7e93eb212",
        "type": "change",
        "z": "07e2886f15f7b5a8",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "soc.lead_voltage",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 500,
        "y": 480,
        "wires": [
            [
                "35ede95b38605a88"
            ]
        ]
    },
    {
        "id": "6e78d5370b977452",
        "type": "inject",
        "z": "07e2886f15f7b5a8",
        "name": "trigger",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 260,
        "y": 480,
        "wires": [
            [
                "fe8003b7e93eb212"
            ]
        ]
    },
    {
        "id": "d114f92c3f4eab4d",
        "type": "function",
        "z": "07e2886f15f7b5a8",
        "name": "login not",
        "func": "msg.payload = !msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1820,
        "y": 820,
        "wires": [
            [
                "1139318daef789ed"
            ]
        ]
    },
    {
        "id": "ec64189460a04d4e",
        "type": "function",
        "z": "d964baea499cbd73",
        "name": "Fridge",
        "func": "//turn on\nif(msg.payload){\n    global.set(\"output_state.fridge\", true);\n    return[{payload:true}, {payload:false}, null];\n}\n// turn off\nelse {\n    global.set(\"output_state.fridge\", false);\n    return[null, {payload:false}, {payload:true}];\n}",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 140,
        "wires": [
            [
                "509a25ec8128a6bc"
            ],
            [
                "fbb8270c39e55d02"
            ],
            [
                "419139856911c5a3"
            ]
        ]
    },
    {
        "id": "fbb8270c39e55d02",
        "type": "delay",
        "z": "d964baea499cbd73",
        "name": "",
        "pauseType": "delay",
        "timeout": "100",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 630,
        "y": 140,
        "wires": [
            [
                "509a25ec8128a6bc",
                "419139856911c5a3"
            ]
        ]
    },
    {
        "id": "509a25ec8128a6bc",
        "type": "rpi-gpio out",
        "z": "d964baea499cbd73",
        "name": "fridge enable",
        "pin": "23",
        "set": true,
        "level": "0",
        "freq": "",
        "out": "out",
        "bcm": true,
        "x": 830,
        "y": 80,
        "wires": []
    },
    {
        "id": "419139856911c5a3",
        "type": "rpi-gpio out",
        "z": "d964baea499cbd73",
        "name": "fridge disable",
        "pin": "22",
        "set": true,
        "level": "0",
        "freq": "",
        "out": "out",
        "bcm": true,
        "x": 840,
        "y": 200,
        "wires": []
    },
    {
        "id": "d0e896ac5cd964b0",
        "type": "switch",
        "z": "d964baea499cbd73",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "fridge",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "charger",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "inverter",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "battery_select",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "pump",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "aux_output",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 6,
        "x": 210,
        "y": 400,
        "wires": [
            [],
            [],
            [],
            [],
            [
                "80b1c44b18f2faee"
            ],
            [
                "cf634ec8bf4f54e2"
            ]
        ]
    },
    {
        "id": "a00db7b893a547af",
        "type": "function",
        "z": "d964baea499cbd73",
        "name": "Charger",
        "func": "//turn on\nif(msg.payload){\n    global.set(\"output_state.charger\", true);\n    return[{payload:true}, {payload:false}, null];\n}\n// turn off\nelse {\n    global.set(\"output_state.charger\", false);\n    return[null, {payload:false}, {payload:true}];\n}",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 300,
        "wires": [
            [
                "bb9660cf8f86ce1f"
            ],
            [
                "e4520910ad598cca"
            ],
            [
                "a1ef0fcfa39a70fa"
            ]
        ]
    },
    {
        "id": "e4520910ad598cca",
        "type": "delay",
        "z": "d964baea499cbd73",
        "name": "",
        "pauseType": "delay",
        "timeout": "100",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 630,
        "y": 300,
        "wires": [
            [
                "bb9660cf8f86ce1f",
                "a1ef0fcfa39a70fa"
            ]
        ]
    },
    {
        "id": "39b1dbfb56f1f8dc",
        "type": "function",
        "z": "d964baea499cbd73",
        "name": "Inverter",
        "func": "//turn on\nif(msg.payload){\n    global.set(\"output_state.inverter\", true);\n    return[{payload:true}, {payload:false}, null];\n}\n// turn off\nelse {\n    global.set(\"output_state.inverter\", false);\n    return[null, {payload:false}, {payload:true}];\n}",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 460,
        "wires": [
            [
                "8b90102d816ea18c"
            ],
            [
                "d112f953e2f0ad84"
            ],
            [
                "dc9f6108c4ef3785"
            ]
        ]
    },
    {
        "id": "d112f953e2f0ad84",
        "type": "delay",
        "z": "d964baea499cbd73",
        "name": "",
        "pauseType": "delay",
        "timeout": "100",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 630,
        "y": 460,
        "wires": [
            [
                "8b90102d816ea18c",
                "dc9f6108c4ef3785"
            ]
        ]
    },
    {
        "id": "bb9660cf8f86ce1f",
        "type": "rpi-gpio out",
        "z": "d964baea499cbd73",
        "name": "charger enable",
        "pin": "8",
        "set": true,
        "level": "0",
        "freq": "",
        "out": "out",
        "bcm": true,
        "x": 840,
        "y": 240,
        "wires": []
    },
    {
        "id": "a1ef0fcfa39a70fa",
        "type": "rpi-gpio out",
        "z": "d964baea499cbd73",
        "name": "charger disable",
        "pin": "25",
        "set": true,
        "level": "0",
        "freq": "",
        "out": "out",
        "bcm": true,
        "x": 840,
        "y": 360,
        "wires": []
    },
    {
        "id": "8b90102d816ea18c",
        "type": "rpi-gpio out",
        "z": "d964baea499cbd73",
        "name": "inverter enable",
        "pin": "18",
        "set": true,
        "level": "0",
        "freq": "",
        "out": "out",
        "bcm": true,
        "x": 840,
        "y": 400,
        "wires": []
    },
    {
        "id": "dc9f6108c4ef3785",
        "type": "rpi-gpio out",
        "z": "d964baea499cbd73",
        "name": "inverter disable",
        "pin": "17",
        "set": true,
        "level": "0",
        "freq": "",
        "out": "out",
        "bcm": true,
        "x": 840,
        "y": 520,
        "wires": []
    },
    {
        "id": "24647f2ef9cb98b1",
        "type": "link in",
        "z": "d964baea499cbd73",
        "name": "update_output_state",
        "links": [
            "125a413ffcc32efb",
            "f9f9b9fc26eae896",
            "d8b319a563049e90",
            "396eb2060e947654",
            "027dae908fb1de04",
            "cd5987620f3c5d05",
            "2ff9eaf1ac182a59",
            "b0d90278f99eeaf3",
            "969b6c5c6a0f5325",
            "60cb5c5c44b3df9e",
            "97fdc5ad7335bb84",
            "35a3c47acf12b252",
            "03ab8ea00614c81b",
            "2b051e3f73ef683a",
            "9e3f8cb65c01e8e4",
            "c2badc74e299a636",
            "bfb5b4c81b1ee8cc",
            "7b66b78c931a4f59",
            "39dac50b0349cb46",
            "66ddd7ba90a0c94c",
            "4b304b75048d5121"
        ],
        "x": 95,
        "y": 400,
        "wires": [
            [
                "d0e896ac5cd964b0"
            ]
        ]
    },
    {
        "id": "ccdcfacffd5e6499",
        "type": "rpi-gpio out",
        "z": "d964baea499cbd73",
        "name": "inverter source sel",
        "pin": "24",
        "set": true,
        "level": "0",
        "freq": "",
        "out": "out",
        "bcm": true,
        "x": 850,
        "y": 580,
        "wires": []
    },
    {
        "id": "16bbb603c833c499",
        "type": "rpi-gpio out",
        "z": "d964baea499cbd73",
        "name": "aux_output",
        "pin": "12",
        "set": true,
        "level": "0",
        "freq": "",
        "out": "out",
        "bcm": true,
        "x": 830,
        "y": 700,
        "wires": []
    },
    {
        "id": "c2be913c1b2b13ca",
        "type": "rpi-gpio out",
        "z": "d964baea499cbd73",
        "name": "pump",
        "pin": "13",
        "set": true,
        "level": "0",
        "freq": "",
        "out": "out",
        "bcm": true,
        "x": 810,
        "y": 640,
        "wires": []
    },
    {
        "id": "ef0bd93387672933",
        "type": "change",
        "z": "d964baea499cbd73",
        "name": "inverter source sel",
        "rules": [
            {
                "t": "set",
                "p": "output_state.inverter_source",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            },
            {
                "t": "change",
                "p": "payload",
                "pt": "msg",
                "from": "lfp_battery",
                "fromt": "str",
                "to": "false",
                "tot": "bool"
            },
            {
                "t": "change",
                "p": "payload",
                "pt": "msg",
                "from": "lead_battery",
                "fromt": "str",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 470,
        "y": 580,
        "wires": [
            [
                "ccdcfacffd5e6499"
            ]
        ]
    },
    {
        "id": "1c214159f19403f7",
        "type": "rpi-gpio in",
        "z": "d964baea499cbd73",
        "name": "switch_kitchen",
        "pin": "6",
        "intype": "up",
        "debounce": "25",
        "read": true,
        "bcm": true,
        "x": 280,
        "y": 860,
        "wires": [
            [
                "3915d0c466b1af6d"
            ]
        ]
    },
    {
        "id": "b1457eda0affd4de",
        "type": "rpi-gpio in",
        "z": "d964baea499cbd73",
        "name": "switch_living_room",
        "pin": "16",
        "intype": "up",
        "debounce": "25",
        "read": true,
        "bcm": true,
        "x": 290,
        "y": 900,
        "wires": [
            [
                "2781d68f4d9e927f"
            ]
        ]
    },
    {
        "id": "1afc17de2d622fe9",
        "type": "rpi-gpio in",
        "z": "d964baea499cbd73",
        "name": "aux_input_1",
        "pin": "20",
        "intype": "up",
        "debounce": "25",
        "read": true,
        "bcm": true,
        "x": 270,
        "y": 940,
        "wires": [
            [
                "d6ca409e88b5c01d"
            ]
        ]
    },
    {
        "id": "d269e5be6a17d2a6",
        "type": "rpi-gpio in",
        "z": "d964baea499cbd73",
        "name": "aux_input_2",
        "pin": "21",
        "intype": "up",
        "debounce": "25",
        "read": true,
        "bcm": true,
        "x": 270,
        "y": 980,
        "wires": [
            []
        ]
    },
    {
        "id": "5aae8c280408aa69",
        "type": "comment",
        "z": "d964baea499cbd73",
        "name": "Hardware Output",
        "info": "",
        "x": 180,
        "y": 100,
        "wires": []
    },
    {
        "id": "016cec0f1e2e21f5",
        "type": "comment",
        "z": "d964baea499cbd73",
        "name": "Hardware Input",
        "info": "",
        "x": 180,
        "y": 800,
        "wires": []
    },
    {
        "id": "5856d6c8ae3a523d",
        "type": "change",
        "z": "d964baea499cbd73",
        "name": "store global var",
        "rules": [
            {
                "t": "set",
                "p": "input_state.switch_kitchen",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "switch_kitchen",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 720,
        "y": 860,
        "wires": [
            [
                "48f32c625a731684",
                "80b1c44b18f2faee"
            ]
        ]
    },
    {
        "id": "f70572dcdf6ab552",
        "type": "change",
        "z": "d964baea499cbd73",
        "name": "store global var",
        "rules": [
            {
                "t": "set",
                "p": "input_state.switch_living_room",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "switch_living_room",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 720,
        "y": 900,
        "wires": [
            [
                "48f32c625a731684",
                "162d5e658c9748bf"
            ]
        ]
    },
    {
        "id": "15b41135157c4f40",
        "type": "change",
        "z": "d964baea499cbd73",
        "name": "store global var",
        "rules": [
            {
                "t": "set",
                "p": "input_state.aux_input_1",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "aux_input_1",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 720,
        "y": 940,
        "wires": [
            [
                "48f32c625a731684"
            ]
        ]
    },
    {
        "id": "834954c70fe27679",
        "type": "change",
        "z": "d964baea499cbd73",
        "name": "store global var",
        "rules": [
            {
                "t": "set",
                "p": "input_state.aux_input_2",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "aux_input_2",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 720,
        "y": 980,
        "wires": [
            [
                "48f32c625a731684"
            ]
        ]
    },
    {
        "id": "3915d0c466b1af6d",
        "type": "change",
        "z": "d964baea499cbd73",
        "name": "low active logic",
        "rules": [
            {
                "t": "change",
                "p": "payload",
                "pt": "msg",
                "from": "1",
                "fromt": "num",
                "to": "false",
                "tot": "bool"
            },
            {
                "t": "change",
                "p": "payload",
                "pt": "msg",
                "from": "0",
                "fromt": "num",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 500,
        "y": 860,
        "wires": [
            [
                "5856d6c8ae3a523d"
            ]
        ]
    },
    {
        "id": "2781d68f4d9e927f",
        "type": "change",
        "z": "d964baea499cbd73",
        "name": "low active logic",
        "rules": [
            {
                "t": "change",
                "p": "payload",
                "pt": "msg",
                "from": "1",
                "fromt": "num",
                "to": "false",
                "tot": "bool"
            },
            {
                "t": "change",
                "p": "payload",
                "pt": "msg",
                "from": "0",
                "fromt": "num",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 500,
        "y": 900,
        "wires": [
            [
                "f70572dcdf6ab552"
            ]
        ]
    },
    {
        "id": "ddeb52db342cb716",
        "type": "change",
        "z": "d964baea499cbd73",
        "name": "low active logic",
        "rules": [
            {
                "t": "change",
                "p": "payload",
                "pt": "msg",
                "from": "1",
                "fromt": "num",
                "to": "false",
                "tot": "bool"
            },
            {
                "t": "change",
                "p": "payload",
                "pt": "msg",
                "from": "0",
                "fromt": "num",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 500,
        "y": 940,
        "wires": [
            [
                "15b41135157c4f40"
            ]
        ]
    },
    {
        "id": "79c0125f5034b014",
        "type": "change",
        "z": "d964baea499cbd73",
        "name": "low active logic",
        "rules": [
            {
                "t": "change",
                "p": "payload",
                "pt": "msg",
                "from": "1",
                "fromt": "num",
                "to": "false",
                "tot": "bool"
            },
            {
                "t": "change",
                "p": "payload",
                "pt": "msg",
                "from": "0",
                "fromt": "num",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 500,
        "y": 980,
        "wires": [
            [
                "834954c70fe27679"
            ]
        ]
    },
    {
        "id": "48f32c625a731684",
        "type": "link out",
        "z": "d964baea499cbd73",
        "name": "input_state_trigger",
        "mode": "link",
        "links": [
            "99581bad73f3c8e5",
            "661173c7ef944d60",
            "e38631f7f3f671b2"
        ],
        "x": 905,
        "y": 920,
        "wires": []
    },
    {
        "id": "c7498c4744895243",
        "type": "function",
        "z": "d964baea499cbd73",
        "name": "init global objects",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\n// init global object\nglobal.set(\"input_state\", {});\nglobal.set(\"output_state\", {charger:false, fridge:false, inverter:false, inverter_source: \"lfp_battery\", pump: false, aux_output:false});\nglobal.set(\"water_meter_cnt\", 0);",
        "finalize": "",
        "libs": [],
        "x": 130,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "80b1c44b18f2faee",
        "type": "change",
        "z": "d964baea499cbd73",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "output_state.pump",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 510,
        "y": 640,
        "wires": [
            [
                "c2be913c1b2b13ca"
            ]
        ]
    },
    {
        "id": "cf634ec8bf4f54e2",
        "type": "change",
        "z": "d964baea499cbd73",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "output_state.aux_output",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 520,
        "y": 700,
        "wires": [
            [
                "16bbb603c833c499"
            ]
        ]
    },
    {
        "id": "ff618d3b45155a45",
        "type": "comment",
        "z": "d964baea499cbd73",
        "name": "Inverter On/Off",
        "info": "",
        "x": 100,
        "y": 900,
        "wires": []
    },
    {
        "id": "07c471c5abeb6cb4",
        "type": "comment",
        "z": "d964baea499cbd73",
        "name": "Pump On/Off",
        "info": "",
        "x": 90,
        "y": 860,
        "wires": []
    },
    {
        "id": "65db229c64319962",
        "type": "link out",
        "z": "d964baea499cbd73",
        "name": "hw_out",
        "mode": "link",
        "links": [
            "db55c6b09f290e98"
        ],
        "x": 1165,
        "y": 900,
        "wires": []
    },
    {
        "id": "162d5e658c9748bf",
        "type": "change",
        "z": "d964baea499cbd73",
        "name": "inverter enable",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "inverter",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1040,
        "y": 860,
        "wires": [
            [
                "65db229c64319962"
            ]
        ]
    },
    {
        "id": "d6ca409e88b5c01d",
        "type": "rbe",
        "z": "d964baea499cbd73",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 470,
        "y": 1020,
        "wires": [
            [
                "1de3c4d20957d077"
            ]
        ]
    },
    {
        "id": "1de3c4d20957d077",
        "type": "function",
        "z": "d964baea499cbd73",
        "name": "increment counter",
        "func": "var counter = global.get(\"water_meter_cnt\");\ncounter++;\nglobal.set(\"water_meter_cnt\", counter);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 1020,
        "wires": [
            [
                "79c0125f5034b014"
            ]
        ]
    },
    {
        "id": "6312476fb60dbf5e",
        "type": "change",
        "z": "da4ad80f311d4a4a",
        "name": "turn on charger",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "charger",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1520,
        "y": 160,
        "wires": [
            [
                "396eb2060e947654"
            ]
        ]
    },
    {
        "id": "db55c6b09f290e98",
        "type": "link in",
        "z": "da4ad80f311d4a4a",
        "name": "broker_input",
        "links": [
            "4119be61f1c06d1c",
            "fedfe1f0547b6294",
            "fe15e5d0c65b881d",
            "3974f3b302b98d2c",
            "65db229c64319962"
        ],
        "x": 205,
        "y": 560,
        "wires": [
            [
                "a01527eeeccf43c4",
                "f56f92e8e8eddb51"
            ]
        ]
    },
    {
        "id": "37a55bbcb877a3d3",
        "type": "switch",
        "z": "da4ad80f311d4a4a",
        "name": "switch ON",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "charger",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "fridge",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "inverter",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 550,
        "y": 280,
        "wires": [
            [
                "1b22ab0b7aa328c2",
                "9a3a764b313b38f4"
            ],
            [
                "6ff894a092c406df"
            ],
            [
                "8ea31df218ad11ec"
            ]
        ]
    },
    {
        "id": "396eb2060e947654",
        "type": "link out",
        "z": "da4ad80f311d4a4a",
        "name": "update hardware",
        "mode": "link",
        "links": [
            "24647f2ef9cb98b1",
            "967c1f84b7ad708b"
        ],
        "x": 1645,
        "y": 160,
        "wires": []
    },
    {
        "id": "eb36b800efe9ee15",
        "type": "delay",
        "z": "da4ad80f311d4a4a",
        "name": "delay 500ms",
        "pauseType": "delay",
        "timeout": "500",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1050,
        "y": 240,
        "wires": [
            [
                "df856ee5dd639a82",
                "9cc501383c363bd3"
            ]
        ]
    },
    {
        "id": "df856ee5dd639a82",
        "type": "delay",
        "z": "da4ad80f311d4a4a",
        "name": "1sec delay",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1250,
        "y": 240,
        "wires": [
            [
                "76dbaa84f1a933eb",
                "3a4cdd05d176a64e"
            ]
        ]
    },
    {
        "id": "76dbaa84f1a933eb",
        "type": "delay",
        "z": "da4ad80f311d4a4a",
        "name": "20sec delay",
        "pauseType": "delay",
        "timeout": "20",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1510,
        "y": 240,
        "wires": [
            [
                "ceb6605082c55e42"
            ]
        ]
    },
    {
        "id": "6ff894a092c406df",
        "type": "change",
        "z": "da4ad80f311d4a4a",
        "name": "switch power source to Lead",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "lead_battery",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "battery_select",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 800,
        "y": 280,
        "wires": [
            [
                "eb36b800efe9ee15",
                "027dae908fb1de04"
            ]
        ]
    },
    {
        "id": "9cc501383c363bd3",
        "type": "change",
        "z": "da4ad80f311d4a4a",
        "name": "turn on inverter",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "inverter",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1260,
        "y": 280,
        "wires": [
            [
                "cd5987620f3c5d05"
            ]
        ]
    },
    {
        "id": "3a4cdd05d176a64e",
        "type": "change",
        "z": "da4ad80f311d4a4a",
        "name": "turn on fridge",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "fridge",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1520,
        "y": 280,
        "wires": [
            [
                "b0d90278f99eeaf3"
            ]
        ]
    },
    {
        "id": "027dae908fb1de04",
        "type": "link out",
        "z": "da4ad80f311d4a4a",
        "name": "update hardware",
        "mode": "link",
        "links": [
            "24647f2ef9cb98b1",
            "967c1f84b7ad708b"
        ],
        "x": 995,
        "y": 280,
        "wires": []
    },
    {
        "id": "cd5987620f3c5d05",
        "type": "link out",
        "z": "da4ad80f311d4a4a",
        "name": "update hardware",
        "mode": "link",
        "links": [
            "24647f2ef9cb98b1",
            "967c1f84b7ad708b"
        ],
        "x": 1385,
        "y": 280,
        "wires": []
    },
    {
        "id": "8ea31df218ad11ec",
        "type": "change",
        "z": "da4ad80f311d4a4a",
        "name": "turn on inverter",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "inverter",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 760,
        "y": 400,
        "wires": [
            [
                "2ff9eaf1ac182a59"
            ]
        ]
    },
    {
        "id": "2ff9eaf1ac182a59",
        "type": "link out",
        "z": "da4ad80f311d4a4a",
        "name": "update hardware",
        "mode": "link",
        "links": [
            "24647f2ef9cb98b1",
            "967c1f84b7ad708b"
        ],
        "x": 905,
        "y": 400,
        "wires": []
    },
    {
        "id": "9a3a764b313b38f4",
        "type": "delay",
        "z": "da4ad80f311d4a4a",
        "name": "delay 500ms",
        "pauseType": "delay",
        "timeout": "500",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1050,
        "y": 120,
        "wires": [
            [
                "7e0d485a357c4615",
                "6d8ed61383af74cc"
            ]
        ]
    },
    {
        "id": "7e0d485a357c4615",
        "type": "delay",
        "z": "da4ad80f311d4a4a",
        "name": "1sec delay",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1250,
        "y": 120,
        "wires": [
            [
                "6312476fb60dbf5e"
            ]
        ]
    },
    {
        "id": "1b22ab0b7aa328c2",
        "type": "change",
        "z": "da4ad80f311d4a4a",
        "name": "switch power source to Lead",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "source",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "battery_select",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 800,
        "y": 160,
        "wires": [
            [
                "9a3a764b313b38f4",
                "f9f9b9fc26eae896"
            ]
        ]
    },
    {
        "id": "6d8ed61383af74cc",
        "type": "change",
        "z": "da4ad80f311d4a4a",
        "name": "turn on inverter",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "inverter",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1260,
        "y": 160,
        "wires": [
            [
                "d8b319a563049e90"
            ]
        ]
    },
    {
        "id": "f9f9b9fc26eae896",
        "type": "link out",
        "z": "da4ad80f311d4a4a",
        "name": "update hardware",
        "mode": "link",
        "links": [
            "24647f2ef9cb98b1"
        ],
        "x": 995,
        "y": 160,
        "wires": []
    },
    {
        "id": "d8b319a563049e90",
        "type": "link out",
        "z": "da4ad80f311d4a4a",
        "name": "update hardware",
        "mode": "link",
        "links": [
            "24647f2ef9cb98b1",
            "967c1f84b7ad708b"
        ],
        "x": 1385,
        "y": 160,
        "wires": []
    },
    {
        "id": "b0d90278f99eeaf3",
        "type": "link out",
        "z": "da4ad80f311d4a4a",
        "name": "update hardware",
        "mode": "link",
        "links": [
            "24647f2ef9cb98b1",
            "967c1f84b7ad708b"
        ],
        "x": 1645,
        "y": 280,
        "wires": []
    },
    {
        "id": "969b6c5c6a0f5325",
        "type": "link out",
        "z": "da4ad80f311d4a4a",
        "name": "update hardware",
        "mode": "link",
        "links": [
            "24647f2ef9cb98b1",
            "967c1f84b7ad708b"
        ],
        "x": 1995,
        "y": 240,
        "wires": []
    },
    {
        "id": "5bc331b4acf13211",
        "type": "switch",
        "z": "da4ad80f311d4a4a",
        "name": "ON / OFF",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 360,
        "y": 440,
        "wires": [
            [
                "37a55bbcb877a3d3"
            ],
            [
                "a4899c2d891d29d2"
            ]
        ]
    },
    {
        "id": "a01527eeeccf43c4",
        "type": "function",
        "z": "da4ad80f311d4a4a",
        "name": "",
        "func": "switch(msg.topic) {\n    case \"charger\":\n        flow.set(\"state.charger\", msg.payload);\n        break;\n    case \"fridge\":\n        flow.set(\"state.fridge\", msg.payload);\n        break;\n    case \"inverter\":\n        flow.set(\"state.inverter\", msg.payload);\n        break;\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 160,
        "y": 440,
        "wires": [
            [
                "5bc331b4acf13211"
            ]
        ]
    },
    {
        "id": "a4899c2d891d29d2",
        "type": "function",
        "z": "da4ad80f311d4a4a",
        "name": "switch off",
        "func": "const state = flow.get(\"state\");\nconst input_state = global.get(\"input_state\");\nmsg.payload = false;\nif(msg.source == undefined){\n    msg.source = \"lfp_battery\";\n}\n\nswitch(msg.topic) {\n    //if fridge or inverter switch on turn only charger off\n    case \"charger\":\n        if(state.fridge || input_state.switch_living_room){\n            return[msg, null];\n        }\n        //turn off all\n        return[null, msg];\n        \n    //if charger or inverter switch on turn only fridge off\n    case \"fridge\":\n        if(state.charger || input_state.switch_living_room){\n            return[msg, null];\n        }\n        //turn off all\n        return[null, msg];\n        \n        \n    // turn off inverter only if charger and fridge are off\n    case \"inverter\":\n        if(!state.charger && !state.fridge){\n            return[null, msg];\n        }\n}\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 600,
        "wires": [
            [
                "97fdc5ad7335bb84",
                "bdca2dd3b92e4ad1"
            ],
            [
                "395b0a7de98992fd"
            ]
        ]
    },
    {
        "id": "97fdc5ad7335bb84",
        "type": "link out",
        "z": "da4ad80f311d4a4a",
        "name": "update hardware",
        "mode": "link",
        "links": [
            "24647f2ef9cb98b1",
            "967c1f84b7ad708b"
        ],
        "x": 695,
        "y": 560,
        "wires": []
    },
    {
        "id": "3873abfaad37979a",
        "type": "delay",
        "z": "da4ad80f311d4a4a",
        "name": "500ms delay",
        "pauseType": "delay",
        "timeout": "500",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1030,
        "y": 640,
        "wires": [
            [
                "aaf93bc61796ce43",
                "0fb4fe3e34312fb3"
            ]
        ]
    },
    {
        "id": "395b0a7de98992fd",
        "type": "change",
        "z": "da4ad80f311d4a4a",
        "name": "turn off charger",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "false",
                "tot": "bool"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "charger",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 760,
        "y": 680,
        "wires": [
            [
                "3873abfaad37979a",
                "2b051e3f73ef683a"
            ]
        ]
    },
    {
        "id": "338b84dc5f308373",
        "type": "change",
        "z": "da4ad80f311d4a4a",
        "name": "turn off inverter",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "false",
                "tot": "bool"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "inverter",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1510,
        "y": 680,
        "wires": [
            [
                "c2badc74e299a636"
            ]
        ]
    },
    {
        "id": "723119da64e5810a",
        "type": "change",
        "z": "da4ad80f311d4a4a",
        "name": "switch power source to LFP",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "lfp_battery",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "battery_select",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1830,
        "y": 680,
        "wires": [
            [
                "bfb5b4c81b1ee8cc"
            ]
        ]
    },
    {
        "id": "6cd6c0a1134274fd",
        "type": "delay",
        "z": "da4ad80f311d4a4a",
        "name": "500ms delay",
        "pauseType": "delay",
        "timeout": "500",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1500,
        "y": 640,
        "wires": [
            [
                "723119da64e5810a"
            ]
        ]
    },
    {
        "id": "0fb4fe3e34312fb3",
        "type": "change",
        "z": "da4ad80f311d4a4a",
        "name": "turn off fridge",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "false",
                "tot": "bool"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "fridge",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1250,
        "y": 680,
        "wires": [
            [
                "9e3f8cb65c01e8e4"
            ]
        ]
    },
    {
        "id": "aaf93bc61796ce43",
        "type": "delay",
        "z": "da4ad80f311d4a4a",
        "name": "500ms delay",
        "pauseType": "delay",
        "timeout": "500",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1240,
        "y": 640,
        "wires": [
            [
                "6cd6c0a1134274fd",
                "338b84dc5f308373"
            ]
        ]
    },
    {
        "id": "2b051e3f73ef683a",
        "type": "link out",
        "z": "da4ad80f311d4a4a",
        "name": "update hardware",
        "mode": "link",
        "links": [
            "24647f2ef9cb98b1",
            "967c1f84b7ad708b"
        ],
        "x": 975,
        "y": 680,
        "wires": []
    },
    {
        "id": "9e3f8cb65c01e8e4",
        "type": "link out",
        "z": "da4ad80f311d4a4a",
        "name": "update hardware",
        "mode": "link",
        "links": [
            "24647f2ef9cb98b1",
            "967c1f84b7ad708b"
        ],
        "x": 1375,
        "y": 680,
        "wires": []
    },
    {
        "id": "c2badc74e299a636",
        "type": "link out",
        "z": "da4ad80f311d4a4a",
        "name": "update hardware",
        "mode": "link",
        "links": [
            "24647f2ef9cb98b1",
            "967c1f84b7ad708b"
        ],
        "x": 1635,
        "y": 680,
        "wires": []
    },
    {
        "id": "bfb5b4c81b1ee8cc",
        "type": "link out",
        "z": "da4ad80f311d4a4a",
        "name": "update hardware",
        "mode": "link",
        "links": [
            "24647f2ef9cb98b1",
            "967c1f84b7ad708b"
        ],
        "x": 2005,
        "y": 680,
        "wires": []
    },
    {
        "id": "f76880f506e95e63",
        "type": "change",
        "z": "da4ad80f311d4a4a",
        "name": "switch power source to LFP",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "lfp_battery",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "battery_select",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1280,
        "y": 560,
        "wires": [
            [
                "39dac50b0349cb46"
            ]
        ]
    },
    {
        "id": "dd07611afafae5c0",
        "type": "switch",
        "z": "da4ad80f311d4a4a",
        "name": "check source",
        "property": "source",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "lfp_battery",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1040,
        "y": 560,
        "wires": [
            [
                "f76880f506e95e63"
            ]
        ]
    },
    {
        "id": "39dac50b0349cb46",
        "type": "link out",
        "z": "da4ad80f311d4a4a",
        "name": "update hardware",
        "mode": "link",
        "links": [
            "24647f2ef9cb98b1",
            "967c1f84b7ad708b"
        ],
        "x": 1445,
        "y": 560,
        "wires": []
    },
    {
        "id": "bdca2dd3b92e4ad1",
        "type": "delay",
        "z": "da4ad80f311d4a4a",
        "name": "500ms delay",
        "pauseType": "delay",
        "timeout": "500",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 750,
        "y": 520,
        "wires": [
            [
                "dd07611afafae5c0"
            ]
        ]
    },
    {
        "id": "fedfe1f0547b6294",
        "type": "link out",
        "z": "da4ad80f311d4a4a",
        "name": "hw_out",
        "mode": "link",
        "links": [
            "db55c6b09f290e98"
        ],
        "x": 685,
        "y": 940,
        "wires": []
    },
    {
        "id": "4b34365dcc194169",
        "type": "inject",
        "z": "da4ad80f311d4a4a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "fridge",
        "payload": "false",
        "payloadType": "bool",
        "x": 380,
        "y": 840,
        "wires": [
            [
                "fedfe1f0547b6294"
            ]
        ]
    },
    {
        "id": "bf6fecb655503238",
        "type": "inject",
        "z": "da4ad80f311d4a4a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "inverter",
        "payload": "true",
        "payloadType": "bool",
        "x": 390,
        "y": 1020,
        "wires": [
            [
                "fedfe1f0547b6294"
            ]
        ]
    },
    {
        "id": "e622a0984aa789a3",
        "type": "inject",
        "z": "da4ad80f311d4a4a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "inverter",
        "payload": "false",
        "payloadType": "bool",
        "x": 390,
        "y": 980,
        "wires": [
            [
                "fedfe1f0547b6294"
            ]
        ]
    },
    {
        "id": "a8901d5a487e746b",
        "type": "inject",
        "z": "da4ad80f311d4a4a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "fridge",
        "payload": "true",
        "payloadType": "bool",
        "x": 380,
        "y": 880,
        "wires": [
            [
                "fedfe1f0547b6294"
            ]
        ]
    },
    {
        "id": "a97da98728425cb3",
        "type": "inject",
        "z": "da4ad80f311d4a4a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "charger",
        "payload": "false",
        "payloadType": "bool",
        "x": 150,
        "y": 900,
        "wires": [
            [
                "fedfe1f0547b6294"
            ]
        ]
    },
    {
        "id": "edc4bf11ce1e874c",
        "type": "inject",
        "z": "da4ad80f311d4a4a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "charger",
        "payload": "true",
        "payloadType": "bool",
        "x": 150,
        "y": 940,
        "wires": [
            [
                "fedfe1f0547b6294"
            ]
        ]
    },
    {
        "id": "ceb6605082c55e42",
        "type": "function",
        "z": "da4ad80f311d4a4a",
        "name": "switch power source to LFP",
        "func": "\n// if charger ON don't allow source to be lfp\nif(!flow.get(\"state.charger\")) {\n    // change source according to source flag\n    if(msg.source == \"lfp_battery\") {\n        msg.payload = \"lfp_battery\";\n        msg.topic = \"battery_select\";\n        return msg;\n    }\n}\nreturn;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1800,
        "y": 240,
        "wires": [
            [
                "969b6c5c6a0f5325"
            ]
        ]
    },
    {
        "id": "f56f92e8e8eddb51",
        "type": "debug",
        "z": "da4ad80f311d4a4a",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 150,
        "y": 400,
        "wires": []
    },
    {
        "id": "3469d892a32ade51",
        "type": "function",
        "z": "da4ad80f311d4a4a",
        "name": "switch off",
        "func": "const state = flow.get(\"state\");\nmsg.payload = false;\nif(msg.source == undefined){\n    msg.source = \"lfp_battery\";\n}\n\nswitch(msg.topic) {\n    //if fridge or inverter on turn only charger off\n    case \"charger\":\n        if(!state.fridge && !state.inverter){\n            return[null, msg];\n        }\n        msg.topic = \"charger\";\n        return[msg, null];\n        \n    //if charger or inverter on turn only fridge off\n    case \"fridge\":\n        if(!state.charger && !state.inverter){\n            return[null, msg];\n        }\n        msg.topic = \"fridge\";\n        return[msg, null];\n        \n        \n    // turn off inverter only if charger and fridge are off\n    case \"inverter\":\n        if(!state.charger && !state.fridge){\n            return[null, msg];\n        }\n}\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 660,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "54236c5a411d7898",
        "type": "ui_dropdown",
        "z": "9fdd40e6fd51eece",
        "d": true,
        "name": "dropdown menu",
        "label": "Fridge Algorithm",
        "tooltip": "",
        "place": "always off",
        "group": "6c304982dc7231d9",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "always on",
                "value": "always_on",
                "type": "str"
            },
            {
                "label": "always on Lead",
                "value": "always_on_lead",
                "type": "str"
            },
            {
                "label": "always off",
                "value": "always_off",
                "type": "str"
            },
            {
                "label": "no temp sensor",
                "value": "no_sensor",
                "type": "str"
            },
            {
                "label": "summer",
                "value": "summer",
                "type": "str"
            },
            {
                "label": "battery life",
                "value": "battery_life",
                "type": "str"
            },
            {
                "label": "spring / fall",
                "value": "spring_fall",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "x": 600,
        "y": 280,
        "wires": [
            [
                "74bacf12187390a3"
            ]
        ]
    },
    {
        "id": "b1464c02dd080905",
        "type": "function",
        "z": "9fdd40e6fd51eece",
        "name": "always off",
        "func": "var fridge_state = global.get(\"output_state.fridge\");\n\n// if fridge is on, turn it off\nif(fridge_state) {\n    msg.payload = false;\n    msg.topic = \"fridge\";\n    return msg;\n}\n\nreturn;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1600,
        "y": 140,
        "wires": [
            [
                "655fd04cf071991d"
            ]
        ]
    },
    {
        "id": "985693e417e29090",
        "type": "function",
        "z": "9fdd40e6fd51eece",
        "name": "always on",
        "func": "const fridge_state = global.get(\"output_state.fridge\");\nconst source = global.get(\"output_state.inverter_source\");\nconst low_battery = global.get(\"soc.lfp_low\");\n\n\n// if fridge is off or source is not lfp, and battery is not low turn it on\nif((!fridge_state || (source == \"lead_battery\")) && !low_battery) {\n    msg.payload = true;\n    msg.topic = \"fridge\";\n    msg.source = \"lfp_battery\";\n}\n// if battery is too low turn off fridge\nelse if(low_battery) {\n    msg.payload = false;\n    msg.topic = \"fridge\";\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1600,
        "y": 180,
        "wires": [
            [
                "655fd04cf071991d"
            ]
        ]
    },
    {
        "id": "2a50336710607758",
        "type": "function",
        "z": "9fdd40e6fd51eece",
        "name": "no sensor algorithm",
        "func": "var fridge_state = global.get(\"output_state.fridge\");\nvar soc = global.get(\"state_of_charge\");\nvar properties = flow.get(\"algorithms.summer\");\nvar interval = context.get(\"interval\");\nconst on_timeout = 10 // 5 min on time\nconst off_timeout = 60 // 5 min on time\n\n// turn on fridge if battery is fully charged with 60 min interval\nif((soc >= 95) && (((Date.now()/60000)-interval) >= off_timeout)) {\n    // if fridge already on\n    if(fridge_state) {\n        return;\n    }\n    context.set(\"interval\", Date.now()/60000);\n    msg.payload = true;\n    msg.switch_to_lfp = true;\n    return msg;\n}\n\n// turn off fridge 10 mins on\nelse if(((Date.now()/60000)-interval) >= on_timeout) {\n    // if fridge already off\n    if(!fridge_state) {\n        return;\n    }\n    context.set(\"interval\", Date.now()/60000);\n    return {payload:false};\n}\n\nreturn;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1630,
        "y": 260,
        "wires": [
            [
                "655fd04cf071991d"
            ]
        ]
    },
    {
        "id": "6c505ff6b3e6bfee",
        "type": "function",
        "z": "9fdd40e6fd51eece",
        "name": "spring / fall algorithm",
        "func": "const fridge_state = global.get(\"output_state.fridge\");\nconst fridge_temp = global.get(\"sensors.fridge_temp\");\n//const charger_state = global.get(\"mppt_broadcast.CS\");\nconst low_battery = global.get(\"soc.lfp_low\");\nconst properties = flow.get(\"algorithms.spring_fall\");\n\nif(context.get(\"timer\")===undefined){\n    context.set(\"timer\", 0);\n}\nconst elapsed_time = Math.round((Date.now() - context.get(\"timer\"))/60000);\n\n// turn on fridge if upper threshold temperature exeeded\nif(fridge_temp > properties.on_threshold && elapsed_time > 10) {\n    // if fridge already on or if mppt is off (is night) or if battery is low\n    if(fridge_state || low_battery) {\n        return;\n    }\n    msg.topic = \"fridge\";\n    msg.payload = true;\n    msg.source = \"lfp_battery\";\n    // restart timer\n    context.set(\"timer\", Date.now());\n}\n\n// turn off fridge if temperature is lower than lower threshold or time threshold is exeeded or the battery is low\nelse if(fridge_temp < properties.off_threshold || elapsed_time > properties.time_threshold || low_battery) {\n    // if fridge already off\n    if(!fridge_state) {\n        return;\n    }\n    msg.topic = \"fridge\";\n    msg.payload = false;\n    // restart timer\n    context.set(\"timer\", Date.now());\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1640,
        "y": 380,
        "wires": [
            [
                "655fd04cf071991d"
            ]
        ]
    },
    {
        "id": "91cee4719f154351",
        "type": "function",
        "z": "9fdd40e6fd51eece",
        "name": "battery life algorithm",
        "func": "var algorithm=flow.get('algorithm') || 0;\n\nif(algorithm == \"battery life\"){\n\n    var lfp_soc = global.get('lfp_soc') || 0;\n    var fridge_temp = flow.get('fridge_temp') || 0;\n    \n    const UPPER_FRIDGE_TEMP_THRESHOLD = 10;\n    const LOWER_FRIDGE_TEMP_THRESHOLD = 6;\n    const UPPER_LFP_SOC_THRESHOLD = 35;\n    const LOWER_LFP_SOC_THRESHOLD = 20;\n    \n    if(lfp_soc >= UPPER_LFP_SOC_THRESHOLD && fridge_temp >= UPPER_FRIDGE_TEMP_THRESHOLD) {\n        msg.payload = true;\n        return msg;\n    }\n    else if(lfp_soc < LOWER_LFP_SOC_THRESHOLD) {\n        flow.set('low_soc', true);\n        msg.payload = false;\n        return msg;\n    }\n    else if(fridge_temp < LOWER_FRIDGE_TEMP_THRESHOLD) {\n        msg.payload = false;\n        return msg;\n    }\n    else {\n        msg.payload = Boolean(global.get('fridge_status') || 0);\n        return msg;\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1640,
        "y": 340,
        "wires": [
            [
                "655fd04cf071991d"
            ]
        ]
    },
    {
        "id": "ef6d34cedcfa5823",
        "type": "change",
        "z": "9fdd40e6fd51eece",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "algorithm",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 950,
        "y": 260,
        "wires": [
            [
                "46d770608ddd97b1"
            ]
        ]
    },
    {
        "id": "46d770608ddd97b1",
        "type": "switch",
        "z": "9fdd40e6fd51eece",
        "name": "",
        "property": "algorithm",
        "propertyType": "flow",
        "rules": [
            {
                "t": "eq",
                "v": "always_off",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "always_on",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "always_on_lead",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "no_sensor",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "summer",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "battery_life",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "spring_fall",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 7,
        "x": 1410,
        "y": 260,
        "wires": [
            [
                "b1464c02dd080905"
            ],
            [
                "985693e417e29090"
            ],
            [
                "b051d9274969c569"
            ],
            [
                "2a50336710607758"
            ],
            [
                "44777856b8a401d2"
            ],
            [
                "91cee4719f154351"
            ],
            [
                "6c505ff6b3e6bfee"
            ]
        ]
    },
    {
        "id": "3974f3b302b98d2c",
        "type": "link out",
        "z": "9fdd40e6fd51eece",
        "name": "hw_out",
        "mode": "link",
        "links": [
            "db55c6b09f290e98"
        ],
        "x": 2085,
        "y": 260,
        "wires": []
    },
    {
        "id": "b051d9274969c569",
        "type": "function",
        "z": "9fdd40e6fd51eece",
        "name": "always on lead",
        "func": "const fridge_state = global.get(\"output_state.fridge\");\nconst source = global.get(\"output_state.inverter_source\");\nconst low_battery = global.get(\"soc.lead_low\");\n\n\n// if fridge is off or source is not lead, and battery is not low turn it on\nif((!fridge_state || (source == \"lfp_battery\")) && !low_battery) {\n    msg.payload = true;\n    msg.topic = \"fridge\";\n    msg.source = \"lead_battery\";\n}\n// if battery is too low turn off fridge\nelse if(low_battery) {\n    msg.payload = false;\n    msg.topic = \"fridge\";\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1620,
        "y": 220,
        "wires": [
            [
                "655fd04cf071991d"
            ]
        ]
    },
    {
        "id": "208912f20db56a7a",
        "type": "function",
        "z": "9fdd40e6fd51eece",
        "name": "init flow variables",
        "func": "",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\n\nvar algorithms = {\n    always_on: {\n        on_threshold: 6,\n        off_threshold: 0,\n        description: \n        \"Always onhalihaloooo\"\n    },\n    always_on_lead: {\n        on_threshold: 10,\n        off_threshold: 2,\n        description: \n        \"Always onhalijdnifivnhaloooo\"\n    },\n    always_off: {\n        on_threshold: 0,\n        off_threshold: 0,\n        description: \n        \"Always ocnfuncer9ennhalihaloooo\"\n    },\n    spring_fall: {\n        on_threshold: 10,\n        off_threshold: 6,\n        description: \n        \"Always on9ucnopaidjcihalihaloooo\"\n    },\n    winter: {\n        on_threshold: 10,\n        off_threshold: 5,\n        description: \n        \"Always onhalihaloooo\"\n    },\n    battery_life: {\n        on_threshold: 15,\n        off_threshold: 7,\n        description: \n        \"Always onhalihaloooo\"\n    },\n    summer: {\n        on_threshold: 7,\n        off_threshold: 4,\n        time_threshold: 30,\n        description: \n        \"Always onhalihaloooo\"\n    }\n};\nflow.set(\"algorithms\", algorithms);\n\nreturn;",
        "finalize": "",
        "libs": [],
        "x": 150,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "62e84a5f3c178cde",
        "type": "inject",
        "z": "9fdd40e6fd51eece",
        "name": "init",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "SELECT fridge_algorithm FROM settings WHERE id=1;",
        "x": 110,
        "y": 280,
        "wires": [
            [
                "e565ddb82d16e386"
            ]
        ]
    },
    {
        "id": "283329e00d32de10",
        "type": "comment",
        "z": "9fdd40e6fd51eece",
        "name": "To Do",
        "info": "# to do:\n- implement algorithms:\n    - winter\n    - battery life\n- update descriptions\n",
        "x": 110,
        "y": 140,
        "wires": []
    },
    {
        "id": "a9e99bfbd5a6d2af",
        "type": "link in",
        "z": "9fdd40e6fd51eece",
        "name": "",
        "links": [
            "2efaa46c04158d68"
        ],
        "x": 1305,
        "y": 300,
        "wires": [
            [
                "46d770608ddd97b1"
            ]
        ]
    },
    {
        "id": "0fc6c2326f4adecc",
        "type": "link in",
        "z": "9fdd40e6fd51eece",
        "name": "hardware_state_trigger",
        "links": [
            "e9f912577a5edc23"
        ],
        "x": 195,
        "y": 420,
        "wires": [
            [
                "7484ad9f24c8b8a1"
            ]
        ]
    },
    {
        "id": "7484ad9f24c8b8a1",
        "type": "change",
        "z": "9fdd40e6fd51eece",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "output_state.fridge",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 420,
        "y": 420,
        "wires": [
            [
                "b9006d61066db92e"
            ]
        ]
    },
    {
        "id": "432f4e13e811db19",
        "type": "ui_gauge",
        "z": "9fdd40e6fd51eece",
        "name": "fridge temp",
        "group": "6c304982dc7231d9",
        "order": 1,
        "width": 7,
        "height": 3,
        "gtype": "donut",
        "title": "Fridge Temp",
        "label": "C°",
        "format": "{{value}}",
        "min": "-20",
        "max": "20",
        "colors": [
            "#00fdff",
            "#00f900",
            "#ca3838"
        ],
        "seg1": "0",
        "seg2": "10",
        "className": "",
        "x": 590,
        "y": 220,
        "wires": []
    },
    {
        "id": "5e5d6802bb9f2f2f",
        "type": "link in",
        "z": "9fdd40e6fd51eece",
        "name": "temp_in",
        "links": [
            "2efaa46c04158d68",
            "56b19a046b403ecb",
            "5d61caaae57aa6c7",
            "e6441c2c3626269a"
        ],
        "x": 195,
        "y": 220,
        "wires": [
            [
                "432f4e13e811db19"
            ]
        ]
    },
    {
        "id": "74bacf12187390a3",
        "type": "subflow:bec2118860bb84ba",
        "z": "9fdd40e6fd51eece",
        "name": "",
        "x": 760,
        "y": 280,
        "wires": [
            [
                "ef6d34cedcfa5823",
                "f6ce1f7bc9249b6f"
            ]
        ]
    },
    {
        "id": "a7a6df3ecbc55485",
        "type": "ui_switch",
        "z": "9fdd40e6fd51eece",
        "d": true,
        "name": "",
        "label": "Override",
        "tooltip": "",
        "group": "6c304982dc7231d9",
        "order": 3,
        "width": 4,
        "height": 1,
        "passthru": true,
        "decouple": "false",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 580,
        "y": 360,
        "wires": [
            [
                "84aa66031a79df15"
            ]
        ]
    },
    {
        "id": "b9006d61066db92e",
        "type": "ui_led",
        "z": "9fdd40e6fd51eece",
        "order": 4,
        "group": "6c304982dc7231d9",
        "width": 3,
        "height": 1,
        "label": " ",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "colorForValue": [
            {
                "color": "#008000",
                "value": "true",
                "valueType": "bool"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showGlow": true,
        "name": "fridge",
        "x": 570,
        "y": 420,
        "wires": []
    },
    {
        "id": "44777856b8a401d2",
        "type": "function",
        "z": "9fdd40e6fd51eece",
        "name": "summer algorithm",
        "func": "const fridge_state = global.get(\"output_state.fridge\");\nconst fridge_temp = global.get(\"sensors.fridge_temp\");\nconst charger_state = global.get(\"mppt_broadcast.CS\");\nconst low_battery = global.get(\"soc.lfp_low\");\nconst properties = flow.get(\"algorithms.summer\");\n\nif(context.get(\"timer\")===undefined){\n    context.set(\"timer\", 0);\n}\nconst elapsed_time = Math.round((Date.now() - context.get(\"timer\"))/60000);\n\n// turn on fridge if upper threshold temperature exeeded\nif(fridge_temp > properties.on_threshold && elapsed_time > 10) {\n    // if fridge already on or if mppt is off (is night) or if battery is low\n    if(fridge_state || charger_state == 0 || low_battery) {\n        return;\n    }\n    msg.topic = \"fridge\";\n    msg.payload = true;\n    msg.source = \"lfp_battery\";\n    // restart timer\n    context.set(\"timer\", Date.now());\n}\n\n// turn off fridge if temperature is lower than lower threshold or time threshold is exeeded or the battery is low\nelse if(fridge_temp < properties.off_threshold || elapsed_time > properties.time_threshold || low_battery) {\n    // if fridge already off\n    if(!fridge_state) {\n        return;\n    }\n    msg.topic = \"fridge\";\n    msg.payload = false;\n    // restart timer\n    context.set(\"timer\", Date.now());\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1630,
        "y": 300,
        "wires": [
            [
                "655fd04cf071991d"
            ]
        ]
    },
    {
        "id": "f6ce1f7bc9249b6f",
        "type": "change",
        "z": "9fdd40e6fd51eece",
        "name": "save setting in db",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "UPDATE settings SET fridge_algorithm=? WHERE id =1;",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "[msg.payload]",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 950,
        "y": 300,
        "wires": [
            [
                "82cf432eea525239"
            ]
        ]
    },
    {
        "id": "c22ddf1409fc5579",
        "type": "change",
        "z": "9fdd40e6fd51eece",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "msg.payload[0].fridge_algorithm",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 420,
        "y": 280,
        "wires": [
            [
                "54236c5a411d7898"
            ]
        ]
    },
    {
        "id": "f258fe5a941282ce",
        "type": "inject",
        "z": "9fdd40e6fd51eece",
        "name": "init",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "SELECT fridge_override FROM settings WHERE id=1;",
        "x": 110,
        "y": 360,
        "wires": [
            [
                "c834e44e9341016f"
            ]
        ]
    },
    {
        "id": "84aa66031a79df15",
        "type": "change",
        "z": "9fdd40e6fd51eece",
        "name": "save setting in db",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "UPDATE settings SET fridge_override=? WHERE id =1;",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "[msg.payload]",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "override",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 950,
        "y": 360,
        "wires": [
            [
                "4a0d1aa261db1638"
            ]
        ]
    },
    {
        "id": "655fd04cf071991d",
        "type": "function",
        "z": "9fdd40e6fd51eece",
        "name": "override while driving",
        "func": "const override = flow.get(\"override\") || false;\nconst running = global.get(\"soc.lead_charging\") || false;\n\nif(override && running){\n    msg.topic = \"lead_battery\";\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1920,
        "y": 260,
        "wires": [
            [
                "3974f3b302b98d2c"
            ]
        ]
    },
    {
        "id": "09d0bef465a2740d",
        "type": "mysql",
        "z": "9fdd40e6fd51eece",
        "mydb": "9accbd4c3bdcd845",
        "name": "",
        "x": 380,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "82cf432eea525239",
        "type": "mysql",
        "z": "9fdd40e6fd51eece",
        "mydb": "9accbd4c3bdcd845",
        "name": "",
        "x": 1120,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "e565ddb82d16e386",
        "type": "mysql",
        "z": "9fdd40e6fd51eece",
        "mydb": "9accbd4c3bdcd845",
        "name": "",
        "x": 240,
        "y": 280,
        "wires": [
            [
                "c22ddf1409fc5579"
            ]
        ]
    },
    {
        "id": "c834e44e9341016f",
        "type": "mysql",
        "z": "9fdd40e6fd51eece",
        "mydb": "9accbd4c3bdcd845",
        "name": "",
        "x": 240,
        "y": 360,
        "wires": [
            [
                "a7a6df3ecbc55485"
            ]
        ]
    },
    {
        "id": "4a0d1aa261db1638",
        "type": "mysql",
        "z": "9fdd40e6fd51eece",
        "mydb": "9accbd4c3bdcd845",
        "name": "",
        "x": 1120,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "289cb0bdc13663ca",
        "type": "serial request",
        "z": "9fdd40e6fd51eece",
        "name": "MPPT request",
        "serial": "594a8a527370c352",
        "x": 400,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "7bf12a2d7aa009f1",
        "type": "inject",
        "z": "da7bf4c175fa04bc",
        "name": "request today history",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": true,
        "onceDelay": "2",
        "topic": "",
        "payload": "7501000",
        "payloadType": "str",
        "x": 220,
        "y": 400,
        "wires": [
            [
                "2c4505a6bdf31597"
            ]
        ]
    },
    {
        "id": "d398aa2f1dc0021d",
        "type": "function",
        "z": "da7bf4c175fa04bc",
        "g": "4f72bd100e0aeb55",
        "name": "broadcast parser",
        "func": "// 1. output --> data object only if data is not corrupted\n// 2. output --> error msg if data is corrupted\n// 3. output --> formatted msg object for database injection\n\nconst db_injection_msg = \"insert into mppt (v_batt, i_batt, v_panel, p_panel, op_state, mppt_mode, off_reason, error_msg, load_state, i_load, yield_total, yield_today, maximum_power_today, yield_yesterday, maximum_power_yesterday, day_sequence_number) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?);\"\nvar bit_stream = msg.payload;\nvar data = {};\n\n// reorder and standardize checksum string\nconst pid_index = bit_stream.indexOf(\"PID\");\nbit_stream = bit_stream.slice(pid_index-2, bit_stream.indexOf(\"Checksum\", pid_index+1)+10);\n\n//calculate checksum for data integrity\nvar checksum = 0;\nfor(const element of bit_stream) {\n   checksum = (checksum + element) & 255; /* Take modulo 256 in account */\n}\n\n// if data is not corrupted\nif(checksum == 0){\n\n    // convert bitstream to string\n    var string = bit_stream.toString();\n    // remove checksum, lf and cr\n    string = string.substring(2, string.indexOf(\"Checksum\")-1);\n    // convert string to array\n    var array = string.split('\\n');\n    // convert array of string into data object\n    for(const element of array){\n        var property_name = element.substring(0, element.indexOf('\\t'));\n        var property_value = element.substring(element.indexOf('\\t')+1, element.length-1);\n        data[property_name] = property_value;\n    }\n    \n    // check data object for integrity before saving it\n    if(Object.keys(data).length == 19){\n        // update flow object with new data\n        global.set(\"mppt_broadcast\", data);\n        \n        // format data to be injected into database\n        var db_data = Object.values(data);\n        // remove static data\n        db_data = db_data.splice(3);\n        msg.payload = db_data;\n        msg.topic = db_injection_msg;\n        return [{payload: data}, null, msg];\n    }\n}\n\n// if data is corrupted\nelse {\n    // data corrucped flag\n    return [null, {payload: \"mppt broadcast corrupted\"}, null];\n}\n",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 100,
        "wires": [
            [
                "9206d6b33eb1b80c"
            ],
            [
                "834eead8c677744d"
            ],
            [
                "df9907032e87ef71"
            ]
        ]
    },
    {
        "id": "834eead8c677744d",
        "type": "debug",
        "z": "da7bf4c175fa04bc",
        "g": "4f72bd100e0aeb55",
        "name": "data corrupted",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 820,
        "y": 100,
        "wires": []
    },
    {
        "id": "8306b8dd4d23f92a",
        "type": "change",
        "z": "da7bf4c175fa04bc",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "7501000",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 240,
        "y": 460,
        "wires": [
            [
                "2c4505a6bdf31597"
            ]
        ]
    },
    {
        "id": "b3e115c07c82ac4d",
        "type": "join",
        "z": "da7bf4c175fa04bc",
        "g": "4f72bd100e0aeb55",
        "name": "",
        "mode": "custom",
        "build": "buffer",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "50",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 310,
        "y": 100,
        "wires": [
            [
                "d398aa2f1dc0021d"
            ]
        ]
    },
    {
        "id": "be284a2db066ffa7",
        "type": "ui_ui_control",
        "z": "da7bf4c175fa04bc",
        "name": "",
        "events": "connect",
        "x": 80,
        "y": 440,
        "wires": [
            [
                "8306b8dd4d23f92a"
            ]
        ]
    },
    {
        "id": "df9907032e87ef71",
        "type": "delay",
        "z": "da7bf4c175fa04bc",
        "g": "4f72bd100e0aeb55",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "minute",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 820,
        "y": 140,
        "wires": [
            [
                "7f76f0559dba727b"
            ]
        ]
    },
    {
        "id": "9206d6b33eb1b80c",
        "type": "link out",
        "z": "da7bf4c175fa04bc",
        "g": "4f72bd100e0aeb55",
        "name": "broadcast_data",
        "mode": "link",
        "links": [
            "141b2968568645c8",
            "1cef5f85427ebe26",
            "914238ef2b24324d",
            "c612dff787ea296c",
            "d9d756885fb28e2c",
            "f775612d28b32cd1",
            "fcf5b50387f36a55"
        ],
        "x": 755,
        "y": 60,
        "wires": []
    },
    {
        "id": "4a368b98f42ead6f",
        "type": "function",
        "z": "da7bf4c175fa04bc",
        "name": "data parser",
        "func": "var raw_data = msg.payload;\nvar data = {\n    energy_yield:           [8, 16],    //*10 to Wh\n    energy_consumed:        [16, 24],   //*10 to Wh\n    battery_voltage_max:    [24, 28],   //*10 to mV\n    battery_voltage_min:    [28, 32],   //*10 to mV\n    error_database:         [32, 34],\n    error_0:                [34, 36],\n    error_1:                [36, 38],\n    error_2:                [38, 40],\n    error_3:                [40, 42],\n    time_bulk:              [42, 46],   // minutes\n    time_absorpion:         [46, 50],   // minutes\n    time_float:             [50, 54],   // minutes\n    power_max:              [54, 62],   // in W\n    battery_current_max:    [62, 66],   //*100 in mA\n    panel_voltage_max:      [66, 70],   //*10 in mV\n    day_sequence_number:    [70, 74]\n};\n// decoding routine\nfor(const property in data){\n    // save substring of interest in array of bytes\n    var byte_arr = raw_data.substring(data[property][0], data[property][1]).match(/.{1,2}/g);\n    // invert low nibble with high nibble\n    var inverted_arr = [];\n    for(var i=byte_arr.length-1; i>=0; i--){\n        inverted_arr.push(byte_arr[i]);\n    }\n    // join array of bytes into string then parse string into dec value\n    data[property] = parseInt(inverted_arr.join(''), 16);\n}\n\n\nflow.set(\"today_history\", data);\nmsg.payload = data;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 440,
        "wires": [
            [
                "aa49c7c84d9331b0",
                "65db3c0a834e9a9a"
            ]
        ]
    },
    {
        "id": "354e89c79761d99d",
        "type": "ui_gauge",
        "z": "da7bf4c175fa04bc",
        "g": "9a882e1f0a753eb1",
        "name": "Solar Power",
        "group": "72a8d1b89999131f",
        "order": 2,
        "width": 7,
        "height": 4,
        "gtype": "gage",
        "title": "Solar",
        "label": "W",
        "format": "{{msg.payload.PPV}}",
        "min": 0,
        "max": "200",
        "colors": [
            "#0433ff",
            "#0433ff",
            "#0433ff"
        ],
        "seg1": "",
        "seg2": "",
        "className": "",
        "x": 1610,
        "y": 60,
        "wires": []
    },
    {
        "id": "345ad1e09979daa0",
        "type": "ui_text",
        "z": "da7bf4c175fa04bc",
        "g": "9a882e1f0a753eb1",
        "group": "72a8d1b89999131f",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "mppt state",
        "label": "MPPT State:",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 1610,
        "y": 100,
        "wires": []
    },
    {
        "id": "d9d756885fb28e2c",
        "type": "link in",
        "z": "da7bf4c175fa04bc",
        "g": "9a882e1f0a753eb1",
        "name": "broadcast_data",
        "links": [
            "9206d6b33eb1b80c"
        ],
        "x": 1355,
        "y": 60,
        "wires": [
            [
                "354e89c79761d99d"
            ]
        ]
    },
    {
        "id": "914238ef2b24324d",
        "type": "link in",
        "z": "da7bf4c175fa04bc",
        "g": "9a882e1f0a753eb1",
        "name": "broadcast_data",
        "links": [
            "9206d6b33eb1b80c"
        ],
        "x": 1355,
        "y": 140,
        "wires": [
            [
                "e8c3c198f6626769"
            ]
        ]
    },
    {
        "id": "f775612d28b32cd1",
        "type": "link in",
        "z": "da7bf4c175fa04bc",
        "g": "9a882e1f0a753eb1",
        "name": "broadcast_data",
        "links": [
            "9206d6b33eb1b80c"
        ],
        "x": 1355,
        "y": 260,
        "wires": [
            [
                "7224dfcc57e8f21e"
            ]
        ]
    },
    {
        "id": "fcf5b50387f36a55",
        "type": "link in",
        "z": "da7bf4c175fa04bc",
        "g": "9a882e1f0a753eb1",
        "name": "broadcast_data",
        "links": [
            "9206d6b33eb1b80c"
        ],
        "x": 1355,
        "y": 100,
        "wires": [
            [
                "697ea17acc99108d"
            ]
        ]
    },
    {
        "id": "697ea17acc99108d",
        "type": "function",
        "z": "da7bf4c175fa04bc",
        "g": "9a882e1f0a753eb1",
        "name": "Parser",
        "func": "switch(msg.payload.CS){\n    case \"0\":\n        return {payload:\"Off\"};\n    case \"2\":\n        return {payload:\"Fault\"};\n    case\"3\":\n        return {payload:\"Bulk\"};\n    case \"4\":\n        return {payload:\"Absorption\"};\n    case \"5\":\n        return {payload:\"Float\"};\n    default:\n        return {payload:\"Other\"};\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1450,
        "y": 100,
        "wires": [
            [
                "345ad1e09979daa0"
            ]
        ]
    },
    {
        "id": "a7a27823a9e4a80f",
        "type": "ui_gauge",
        "z": "da7bf4c175fa04bc",
        "g": "9a882e1f0a753eb1",
        "name": "Battery Power",
        "group": "72a8d1b89999131f",
        "order": 4,
        "width": 7,
        "height": 4,
        "gtype": "gage",
        "title": "Battery",
        "label": "W",
        "format": "{{value}}",
        "min": "0",
        "max": "200",
        "colors": [
            "#ff9300",
            "#595959",
            "#00f900"
        ],
        "seg1": "-1",
        "seg2": "1",
        "className": "",
        "x": 1620,
        "y": 140,
        "wires": []
    },
    {
        "id": "1cef5f85427ebe26",
        "type": "link in",
        "z": "da7bf4c175fa04bc",
        "g": "9a882e1f0a753eb1",
        "name": "broadcast_data",
        "links": [
            "9206d6b33eb1b80c"
        ],
        "x": 1355,
        "y": 180,
        "wires": [
            [
                "045cfff27c109e23"
            ]
        ]
    },
    {
        "id": "f3f2fd7cb8e09f2f",
        "type": "ui_gauge",
        "z": "da7bf4c175fa04bc",
        "g": "9a882e1f0a753eb1",
        "name": "Load Power",
        "group": "72a8d1b89999131f",
        "order": 5,
        "width": 7,
        "height": 4,
        "gtype": "gage",
        "title": "Load",
        "label": "W",
        "format": "{{value}}",
        "min": "0",
        "max": "200",
        "colors": [
            "#00f900",
            "#00f900",
            "#ff9300"
        ],
        "seg1": "",
        "seg2": "150",
        "className": "",
        "x": 1610,
        "y": 180,
        "wires": []
    },
    {
        "id": "045cfff27c109e23",
        "type": "function",
        "z": "da7bf4c175fa04bc",
        "g": "9a882e1f0a753eb1",
        "name": "Parser",
        "func": "\n\nmsg.payload = Math.round((msg.payload.IL/1000) * (msg.payload.V/1000));\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1450,
        "y": 180,
        "wires": [
            [
                "f3f2fd7cb8e09f2f"
            ]
        ]
    },
    {
        "id": "22735b6bd0e630b4",
        "type": "ui_led",
        "z": "da7bf4c175fa04bc",
        "g": "9a882e1f0a753eb1",
        "order": 7,
        "group": "72a8d1b89999131f",
        "width": 3,
        "height": 1,
        "label": " ",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "colorForValue": [
            {
                "color": "#008000",
                "value": "ON",
                "valueType": "str"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showGlow": true,
        "name": "load_led",
        "x": 1600,
        "y": 260,
        "wires": []
    },
    {
        "id": "b40996e50e7b73d6",
        "type": "ui_switch",
        "z": "da7bf4c175fa04bc",
        "d": true,
        "g": "9a882e1f0a753eb1",
        "name": "",
        "label": "Load Enable",
        "tooltip": "",
        "group": "72a8d1b89999131f",
        "order": 6,
        "width": 4,
        "height": 1,
        "passthru": true,
        "decouple": "false",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "1",
        "onvalueType": "num",
        "onicon": "",
        "oncolor": "",
        "offvalue": "0",
        "offvalueType": "num",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 1610,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "7224dfcc57e8f21e",
        "type": "function",
        "z": "da7bf4c175fa04bc",
        "g": "9a882e1f0a753eb1",
        "name": "Parser",
        "func": "msg.payload = msg.payload.LOAD;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1450,
        "y": 260,
        "wires": [
            [
                "22735b6bd0e630b4"
            ]
        ]
    },
    {
        "id": "b484f72b482f39d2",
        "type": "comment",
        "z": "da7bf4c175fa04bc",
        "name": "ToDo",
        "info": "retrieve hex data;\nimplement load disable with hex com",
        "x": 90,
        "y": 300,
        "wires": []
    },
    {
        "id": "3ba695d559405511",
        "type": "rbe",
        "z": "da7bf4c175fa04bc",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload.day_sequence_number",
        "topi": "topic",
        "x": 690,
        "y": 400,
        "wires": [
            [
                "4296a75af6147825"
            ]
        ]
    },
    {
        "id": "2c4505a6bdf31597",
        "type": "subflow:281e43440f4d8703",
        "z": "da7bf4c175fa04bc",
        "name": "",
        "x": 470,
        "y": 400,
        "wires": [
            [],
            [
                "3ba695d559405511",
                "4a368b98f42ead6f"
            ]
        ]
    },
    {
        "id": "1cb2f68b95a7b349",
        "type": "subflow:281e43440f4d8703",
        "z": "da7bf4c175fa04bc",
        "name": "",
        "x": 1150,
        "y": 400,
        "wires": [
            [],
            [
                "bdb249687a52354e"
            ]
        ]
    },
    {
        "id": "4296a75af6147825",
        "type": "change",
        "z": "da7bf4c175fa04bc",
        "name": "yesterday hisrory",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "7511000",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 970,
        "y": 400,
        "wires": [
            [
                "1cb2f68b95a7b349"
            ]
        ]
    },
    {
        "id": "bdb249687a52354e",
        "type": "function",
        "z": "da7bf4c175fa04bc",
        "name": "data parser",
        "func": "const db_injection_msg = \"INSERT INTO mppt_daily_history (energy_yield, energy_consumed, battery_voltage_max, battery_voltage_min, error_database, error_0, error_1, error_2, error_3, time_bulk, time_absorpion, time_float, power_max, battery_current_max, panel_voltage_max, day_sequence_number, energy_offset, energy_charger) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?);\";\nconst raw_data = msg.payload;\nvar data = {\n    energy_yield:           [8, 16],    //*10 to Wh\n    energy_consumed:        [16, 24],   //*10 to Wh\n    battery_voltage_max:    [24, 28],   //*10 to mV\n    battery_voltage_min:    [28, 32],   //*10 to mV\n    error_database:         [32, 34],\n    error_0:                [34, 36],\n    error_1:                [36, 38],\n    error_2:                [38, 40],\n    error_3:                [40, 42],\n    time_bulk:              [42, 46],   // minutes\n    time_absorpion:         [46, 50],   // minutes\n    time_float:             [50, 54],   // minutes\n    power_max:              [54, 62],   // in W\n    battery_current_max:    [62, 66],   //*100 in mA\n    panel_voltage_max:      [66, 70],   //*10 in mV\n    day_sequence_number:    [70, 74]\n};\n// decoding routine\nfor(const property in data){\n    // save substring of interest in array of bytes\n    var byte_arr = raw_data.substring(data[property][0], data[property][1]).match(/.{1,2}/g);\n    // invert low nibble with high nibble\n    var inverted_arr = [];\n    for(var i=byte_arr.length-1; i>=0; i--){\n        inverted_arr.push(byte_arr[i]);\n    }\n    // join array of bytes into string then parse string into dec value\n    data[property] = parseInt(inverted_arr.join(''), 16);\n}\n\n\n\n    \n// prepare data to be injected into database\nmsg.payload = [data.energy_yield*10, data.energy_consumed*10, data.battery_voltage_max*10, data.battery_voltage_min*10, data.error_database, data.error_0, data.error_1, data.error_2, data.error_3, data.time_bulk, data.time_absorpion, data.time_float, data.power_max, data.battery_current_max*100, data.panel_voltage_max*10, data.day_sequence_number, flow.get(\"energy_offset\"), flow.get(\"energy_charger\")];\nmsg.topic = db_injection_msg;\n// update energy offset\nflow.set(\"energy_offset\", flow.get(\"energy_offset\") + (data.energy_yield*10) - (data.energy_consumed*10) + flow.get(\"energy_charger\"));\nflow.set(\"energy_charger\", 0);\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1330,
        "y": 400,
        "wires": [
            [
                "e17940f64114e6bb"
            ]
        ]
    },
    {
        "id": "b6d34be2e72a0f04",
        "type": "link out",
        "z": "da7bf4c175fa04bc",
        "name": "lfp_soc",
        "mode": "link",
        "links": [
            "c612dff787ea296c"
        ],
        "x": 1145,
        "y": 480,
        "wires": []
    },
    {
        "id": "aa49c7c84d9331b0",
        "type": "function",
        "z": "da7bf4c175fa04bc",
        "name": "SOC calculator",
        "func": "const MAX_CAPACITY = 364; //Wh (12.5V * 30Ah)\nconst energy_yield = msg.payload.energy_yield*10; //Wh\nconst energy_consumed = msg.payload.energy_consumed*10;   //Wh\nconst energy_offset = flow.get(\"energy_offset\") || 344;\nconst energy_charger = flow.get(\"energy_charger\") || 0;\nvar left_energy = energy_offset + energy_yield - energy_consumed + energy_charger;\n\n// if battery fully charged (float mode)\n// or if error detected (SOC > 100%)\n// then adjust energy offset\nif(global.get(\"mppt_broadcast\").CS == '5' || left_energy > MAX_CAPACITY){\n    flow.set(\"energy_offset\", (MAX_CAPACITY - energy_yield + energy_consumed - energy_charger));\n}\n// SOC < 0%\nelse if(left_energy < 0){\n    flow.set(\"energy_offset\", (0 - energy_yield + energy_consumed - energy_charger));\n}\n\n// calculate soc in %\nleft_energy = flow.get(\"energy_offset\") + energy_yield - energy_consumed + energy_charger;\nconst soc = Math.round(left_energy * 100 / MAX_CAPACITY);\nmsg.payload = soc;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 480,
        "wires": [
            [
                "b6d34be2e72a0f04"
            ]
        ]
    },
    {
        "id": "65db3c0a834e9a9a",
        "type": "function",
        "z": "da7bf4c175fa04bc",
        "name": "count energy yield from charger",
        "func": "const CHARGER_CURRENT = 4;\nconst mppt_broadcast = global.get(\"mppt_broadcast\");\n\n// if charger is on and battery is not full (not absorption nor float state)\nif(global.get(\"output_state.charger\") && mppt_broadcast.CS !=4 && mppt_broadcast.CS !=5){\n    // calculate energy yield from charger in one minute (currrent*voltage/60minutes)\n    const charger_energy = (CHARGER_CURRENT/60)* mppt_broadcast.V;\n    // store charger energy counter in a flow variable\n    flow.set(\"energy_charger\", (flow.get(\"energy_charger\")||0) + charger_energy);\n}\nreturn;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "9f19d878235f0587",
        "type": "catch",
        "z": "da7bf4c175fa04bc",
        "name": "",
        "scope": [
            "bdb249687a52354e"
        ],
        "uncaught": false,
        "x": 690,
        "y": 360,
        "wires": [
            [
                "4296a75af6147825"
            ]
        ]
    },
    {
        "id": "a9d1edb3213d77c1",
        "type": "catch",
        "z": "da7bf4c175fa04bc",
        "name": "",
        "scope": [
            "4a368b98f42ead6f"
        ],
        "uncaught": false,
        "x": 90,
        "y": 480,
        "wires": [
            [
                "8306b8dd4d23f92a"
            ]
        ]
    },
    {
        "id": "e8c3c198f6626769",
        "type": "function",
        "z": "da7bf4c175fa04bc",
        "g": "9a882e1f0a753eb1",
        "name": "Parser",
        "func": "// calculate power\nmsg.payload = Math.round((msg.payload.I/1000) * (msg.payload.V/1000));\n\n// if charger is on and battery is not full (not absorption nor float state)\nif(global.get(\"output_state.charger\") && msg.payload.CS !=4 && msg.payload.CS !=5){\n    const charger_power = Math.round(4*msg.payload.V/1000);\n    msg.payload = msg.payload + charger_power;\n}\n\n// ui stuff --> change gage color if is charging or discharging\nif(msg.payload > 0 && context.get(\"color\") != \"#00F900\" ){\n    context.set(\"color\", \"#00F900\");\n}\nelse if(msg.payload <= 0 && context.get(\"color\") != \"#CA3838\") {\n    context.set(\"color\", \"#CA3838\");\n}\nelse {\n    // remove sign\n    msg.payload = Math.abs(msg.payload);\n    return msg;\n}\n\n// remove sign\nmsg.payload = Math.abs(msg.payload);\nmsg.ui_control = \n{\n    \"gtype\": \"gage\",\n    \"colors\": [context.get(\"color\"), context.get(\"color\"), context.get(\"color\")],\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1450,
        "y": 140,
        "wires": [
            [
                "a7a27823a9e4a80f"
            ]
        ]
    },
    {
        "id": "7f76f0559dba727b",
        "type": "mysql",
        "z": "da7bf4c175fa04bc",
        "g": "4f72bd100e0aeb55",
        "mydb": "9accbd4c3bdcd845",
        "name": "broadcast injection",
        "x": 1030,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "e17940f64114e6bb",
        "type": "mysql",
        "z": "da7bf4c175fa04bc",
        "mydb": "9accbd4c3bdcd845",
        "name": "broadcast injection",
        "x": 1530,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "0b3aacd51f241ec7",
        "type": "serial in",
        "z": "da7bf4c175fa04bc",
        "g": "4f72bd100e0aeb55",
        "name": "MPPT broadcast",
        "serial": "594a8a527370c352",
        "x": 120,
        "y": 100,
        "wires": [
            [
                "b3e115c07c82ac4d"
            ]
        ]
    },
    {
        "id": "0094be9ee0b66230",
        "type": "ui_gauge",
        "z": "b8c63413a01bd779",
        "name": "",
        "group": "7dbe224d7e5b35ba",
        "order": 4,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "Lead Battery",
        "label": "V",
        "format": "{{value}}",
        "min": "10",
        "max": "14.6",
        "colors": [
            "#ff2600",
            "#fffb00",
            "#00f900"
        ],
        "seg1": "12",
        "seg2": "12.6",
        "className": "",
        "x": 810,
        "y": 180,
        "wires": []
    },
    {
        "id": "bdddc37880b50c91",
        "type": "ui_led",
        "z": "b8c63413a01bd779",
        "order": 5,
        "group": "7dbe224d7e5b35ba",
        "width": 0,
        "height": 0,
        "label": "Low Battery",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "colorForValue": [
            {
                "color": "#ff0000",
                "value": "true",
                "valueType": "bool"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showGlow": true,
        "name": "lead_low_soc",
        "x": 820,
        "y": 240,
        "wires": []
    },
    {
        "id": "cdcd2f2861d29305",
        "type": "ui_led",
        "z": "b8c63413a01bd779",
        "order": 3,
        "group": "7dbe224d7e5b35ba",
        "width": 0,
        "height": 0,
        "label": "Low Battery",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "colorForValue": [
            {
                "color": "#ff0000",
                "value": "true",
                "valueType": "bool"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showGlow": true,
        "name": "lfp_low_soc",
        "x": 810,
        "y": 120,
        "wires": []
    },
    {
        "id": "10b3c27b335e070c",
        "type": "ui_led",
        "z": "b8c63413a01bd779",
        "order": 6,
        "group": "7dbe224d7e5b35ba",
        "width": 0,
        "height": 0,
        "label": "Motor Running",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "colorForValue": [
            {
                "color": "#008000",
                "value": "true",
                "valueType": "bool"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showGlow": true,
        "name": "motor_state",
        "x": 810,
        "y": 320,
        "wires": []
    },
    {
        "id": "c3c23dd53fcd4f86",
        "type": "link in",
        "z": "b8c63413a01bd779",
        "name": "lead_voltage",
        "links": [
            "a064f7feb640a913"
        ],
        "x": 145,
        "y": 180,
        "wires": [
            [
                "aec133d50a5eb6b0",
                "4a5dc33a8edbb150"
            ]
        ]
    },
    {
        "id": "4a5dc33a8edbb150",
        "type": "switch",
        "z": "b8c63413a01bd779",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "lt",
                "v": "12",
                "vt": "num"
            },
            {
                "t": "gte",
                "v": "12",
                "vt": "num"
            },
            {
                "t": "lt",
                "v": "13",
                "vt": "num"
            },
            {
                "t": "gte",
                "v": "13",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 250,
        "y": 280,
        "wires": [
            [
                "d226d300b76bf048"
            ],
            [
                "5683cbf7479ab25b"
            ],
            [
                "7c71b2126c7e4348",
                "958c2864691783df"
            ],
            [
                "290b71846252473b"
            ]
        ]
    },
    {
        "id": "5596f7fdc9bfd175",
        "type": "change",
        "z": "b8c63413a01bd779",
        "name": "payload true",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            },
            {
                "t": "set",
                "p": "soc.lead_charging",
                "pt": "global",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 430,
        "y": 340,
        "wires": [
            [
                "10b3c27b335e070c"
            ]
        ]
    },
    {
        "id": "7c71b2126c7e4348",
        "type": "change",
        "z": "b8c63413a01bd779",
        "name": "payload false",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "false",
                "tot": "bool"
            },
            {
                "t": "set",
                "p": "soc.lead_charging",
                "pt": "global",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 430,
        "y": 300,
        "wires": [
            [
                "10b3c27b335e070c"
            ]
        ]
    },
    {
        "id": "a6b8733363d241aa",
        "type": "ui_gauge",
        "z": "b8c63413a01bd779",
        "name": "",
        "group": "7dbe224d7e5b35ba",
        "order": 2,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "LFP Battery",
        "label": "V",
        "format": "{{msg.payload}}",
        "min": "10",
        "max": "14.6",
        "colors": [
            "#ff2600",
            "#ff9300",
            "#00f900"
        ],
        "seg1": "12",
        "seg2": "13",
        "className": "",
        "x": 810,
        "y": 60,
        "wires": []
    },
    {
        "id": "9ae027f41f3b6ea5",
        "type": "ui_switch",
        "z": "b8c63413a01bd779",
        "d": true,
        "name": "",
        "label": "LFP Charger",
        "tooltip": "",
        "group": "7dbe224d7e5b35ba",
        "order": 7,
        "width": 4,
        "height": 1,
        "passthru": true,
        "decouple": "false",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "1",
        "onvalueType": "num",
        "onicon": "",
        "oncolor": "",
        "offvalue": "0",
        "offvalueType": "num",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 810,
        "y": 400,
        "wires": [
            [
                "b6a4eb73e8837b7b",
                "5c6e2f83934f4aa1"
            ]
        ]
    },
    {
        "id": "fedace76aae519fa",
        "type": "ui_led",
        "z": "b8c63413a01bd779",
        "d": true,
        "order": 8,
        "group": "7dbe224d7e5b35ba",
        "width": 3,
        "height": 1,
        "label": " ",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "colorForValue": [
            {
                "color": "#008000",
                "value": "true",
                "valueType": "bool"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showGlow": true,
        "name": "charger_led_lfp",
        "x": 1240,
        "y": 340,
        "wires": []
    },
    {
        "id": "d226d300b76bf048",
        "type": "change",
        "z": "b8c63413a01bd779",
        "name": "payload true",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            },
            {
                "t": "set",
                "p": "soc.lead_low",
                "pt": "global",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 430,
        "y": 220,
        "wires": [
            [
                "bdddc37880b50c91"
            ]
        ]
    },
    {
        "id": "5683cbf7479ab25b",
        "type": "change",
        "z": "b8c63413a01bd779",
        "name": "payload false",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "false",
                "tot": "bool"
            },
            {
                "t": "set",
                "p": "soc.lead_low",
                "pt": "global",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 430,
        "y": 260,
        "wires": [
            [
                "bdddc37880b50c91"
            ]
        ]
    },
    {
        "id": "958c2864691783df",
        "type": "change",
        "z": "b8c63413a01bd779",
        "name": "enabled false",
        "rules": [
            {
                "t": "set",
                "p": "enabled",
                "pt": "msg",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 430,
        "y": 380,
        "wires": [
            [
                "9ae027f41f3b6ea5"
            ]
        ]
    },
    {
        "id": "6e9076f9068f57df",
        "type": "change",
        "z": "b8c63413a01bd779",
        "name": "enabled true",
        "rules": [
            {
                "t": "set",
                "p": "enabled",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "charger_enable",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 430,
        "y": 420,
        "wires": [
            [
                "7f0ba9fe024c4084"
            ]
        ]
    },
    {
        "id": "b6a4eb73e8837b7b",
        "type": "function",
        "z": "b8c63413a01bd779",
        "name": "check motor state",
        "func": "msg.topic = \"charger\";\n\n// if motor is running\nif(msg.enabled || msg.enabled == undefined){\n    msg.source = \"lead_battery\";\n    // if switch enabled\n    if(msg.payload == 1){\n        msg.payload = true;\n    }\n    // if switch disabled\n    else {\n        msg.payload = false;\n    }\n}\n// if motor is not running\nelse{\n    msg.source =\"lfp_battery\";\n    // if charge lead battery enabled\n    if(flow.get(\"charge_lead\")){\n        msg.payload = true;\n    }\n        // if charge lead battery disabled\n    else{\n        msg.payload = false;\n    }\n}\n\nif(global.get(\"output_state.charger\") != msg.payload){\n    return msg;\n}\nif(global.get(\"output_state.inverter_source\") != msg.source){\n    return msg;\n}\nif(global.get(\"output_state.inverter\") != msg.payload){\n    return msg;\n}\n\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 380,
        "wires": [
            [
                "fedace76aae519fa",
                "fe15e5d0c65b881d",
                "899b3faf3e5b6f03"
            ]
        ]
    },
    {
        "id": "5c6e2f83934f4aa1",
        "type": "rbe",
        "z": "b8c63413a01bd779",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": false,
        "property": "payload",
        "topi": "topic",
        "x": 970,
        "y": 420,
        "wires": [
            [
                "2fde7d3dfefbb886"
            ]
        ]
    },
    {
        "id": "2fde7d3dfefbb886",
        "type": "change",
        "z": "b8c63413a01bd779",
        "name": "save setting in db",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "UPDATE settings SET charger_enable=? WHERE id =1;",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "[msg.payload]",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1230,
        "y": 420,
        "wires": [
            [
                "035ed53c898a5e04"
            ]
        ]
    },
    {
        "id": "b04d7755bc397b63",
        "type": "inject",
        "z": "b8c63413a01bd779",
        "name": "init",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.1",
        "topic": "",
        "payload": "charger_enable",
        "payloadType": "str",
        "x": 450,
        "y": 460,
        "wires": [
            [
                "7f0ba9fe024c4084"
            ]
        ]
    },
    {
        "id": "7f0ba9fe024c4084",
        "type": "subflow:d4e4f65b33f57c36",
        "z": "b8c63413a01bd779",
        "name": "",
        "x": 610,
        "y": 440,
        "wires": [
            [
                "9ae027f41f3b6ea5"
            ]
        ]
    },
    {
        "id": "ff010ad75d971674",
        "type": "switch",
        "z": "b8c63413a01bd779",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "lt",
                "v": "50",
                "vt": "str"
            },
            {
                "t": "gte",
                "v": "50",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 250,
        "y": 120,
        "wires": [
            [
                "41af019aba8a76f9"
            ],
            [
                "e72f142226ded2df"
            ]
        ]
    },
    {
        "id": "41af019aba8a76f9",
        "type": "change",
        "z": "b8c63413a01bd779",
        "name": "payload true",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            },
            {
                "t": "set",
                "p": "soc.lfp_low",
                "pt": "global",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 430,
        "y": 100,
        "wires": [
            [
                "cdcd2f2861d29305"
            ]
        ]
    },
    {
        "id": "e72f142226ded2df",
        "type": "change",
        "z": "b8c63413a01bd779",
        "name": "payload false",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "false",
                "tot": "bool"
            },
            {
                "t": "set",
                "p": "soc.lfp_low",
                "pt": "global",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 430,
        "y": 140,
        "wires": [
            [
                "cdcd2f2861d29305"
            ]
        ]
    },
    {
        "id": "c612dff787ea296c",
        "type": "link in",
        "z": "b8c63413a01bd779",
        "name": "lfp_soc",
        "links": [
            "9206d6b33eb1b80c",
            "b6d34be2e72a0f04"
        ],
        "x": 145,
        "y": 60,
        "wires": [
            [
                "ff010ad75d971674",
                "5233c902885fe7b9"
            ]
        ]
    },
    {
        "id": "aec133d50a5eb6b0",
        "type": "change",
        "z": "b8c63413a01bd779",
        "name": "update global",
        "rules": [
            {
                "t": "set",
                "p": "soc.lead_voltage",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 440,
        "y": 180,
        "wires": [
            [
                "0094be9ee0b66230"
            ]
        ]
    },
    {
        "id": "5233c902885fe7b9",
        "type": "change",
        "z": "b8c63413a01bd779",
        "name": "update global",
        "rules": [
            {
                "t": "set",
                "p": "soc.lfp_soc",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "mppt_broadcast.V",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 440,
        "y": 60,
        "wires": [
            [
                "3036f60b81ac1783",
                "36873d317fb09e6a"
            ]
        ]
    },
    {
        "id": "fe15e5d0c65b881d",
        "type": "link out",
        "z": "b8c63413a01bd779",
        "name": "hw_out",
        "mode": "link",
        "links": [
            "db55c6b09f290e98"
        ],
        "x": 1175,
        "y": 380,
        "wires": []
    },
    {
        "id": "aff03335a82cd756",
        "type": "inject",
        "z": "b8c63413a01bd779",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 680,
        "wires": [
            [
                "640c5a3f83b7c644"
            ]
        ]
    },
    {
        "id": "640c5a3f83b7c644",
        "type": "function",
        "z": "b8c63413a01bd779",
        "name": "",
        "func": "const db_injection_msg = \"INSERT INTO soc (lfp_soc, lfp_low, lead_voltage, lead_low, lead_charging) VALUES (?,?,?,?,?);\";\nvar soc = global.get(\"soc\");\n\nif (soc !==undefined) {\n    msg.payload = [soc.lfp_soc, soc.lfp_low, soc.lead_voltage, soc.lead_low, soc.lead_charging]\n    msg.topic = db_injection_msg;\n    return msg;\n}\nreturn;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 680,
        "wires": [
            [
                "d505cfb69593c0a7"
            ]
        ]
    },
    {
        "id": "22c8d51d7e0d6390",
        "type": "function",
        "z": "b8c63413a01bd779",
        "name": "set lfp low",
        "func": "const lfp_voltage = msg.payload.V;\nif(lfp_voltage <= 11000) {\n    global.set(\"soc.lfp_low\", true);\n}\nelse if(global.get(\"soc.lfp_low\") && lfp_voltage >= 11700) {\n    global.set(\"soc.lfp_low\", false);\n}\nreturn;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "141b2968568645c8",
        "type": "link in",
        "z": "b8c63413a01bd779",
        "name": "lfp_soc",
        "links": [
            "9206d6b33eb1b80c"
        ],
        "x": 265,
        "y": 540,
        "wires": [
            [
                "22c8d51d7e0d6390"
            ]
        ]
    },
    {
        "id": "29df2df5d8da0deb",
        "type": "inject",
        "z": "b8c63413a01bd779",
        "d": true,
        "name": "clock",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "source",
                "v": "lead_battery",
                "vt": "str"
            },
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "28 09 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "charger",
        "payload": "true",
        "payloadType": "bool",
        "x": 150,
        "y": 800,
        "wires": [
            [
                "025b9a53567e867a",
                "4119be61f1c06d1c"
            ]
        ]
    },
    {
        "id": "025b9a53567e867a",
        "type": "delay",
        "z": "b8c63413a01bd779",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "minutes",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 380,
        "y": 840,
        "wires": [
            [
                "f29564a401155eda"
            ]
        ]
    },
    {
        "id": "f29564a401155eda",
        "type": "change",
        "z": "b8c63413a01bd779",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "false",
                "tot": "bool"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "charger",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 580,
        "y": 840,
        "wires": [
            [
                "4119be61f1c06d1c"
            ]
        ]
    },
    {
        "id": "15da812ad24706d6",
        "type": "comment",
        "z": "b8c63413a01bd779",
        "name": "Keep starter battery charged",
        "info": "Every day at 12 turn on the charger for 2 hours",
        "x": 200,
        "y": 760,
        "wires": []
    },
    {
        "id": "4119be61f1c06d1c",
        "type": "link out",
        "z": "b8c63413a01bd779",
        "name": "test",
        "mode": "link",
        "links": [
            "db55c6b09f290e98"
        ],
        "x": 815,
        "y": 800,
        "wires": []
    },
    {
        "id": "c0b0d4a70bcdea92",
        "type": "ui_switch",
        "z": "b8c63413a01bd779",
        "d": true,
        "name": "",
        "label": "Lead Charger",
        "tooltip": "",
        "group": "7dbe224d7e5b35ba",
        "order": 9,
        "width": 4,
        "height": 1,
        "passthru": true,
        "decouple": "false",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 820,
        "y": 520,
        "wires": [
            [
                "dbf28cc4ae43e2ab",
                "703a36f6cbbee943"
            ]
        ]
    },
    {
        "id": "703a36f6cbbee943",
        "type": "ui_led",
        "z": "b8c63413a01bd779",
        "d": true,
        "order": 10,
        "group": "7dbe224d7e5b35ba",
        "width": 3,
        "height": 1,
        "label": " ",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "colorForValue": [
            {
                "color": "#008000",
                "value": "true",
                "valueType": "bool"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showGlow": true,
        "name": "charger_led_lead",
        "x": 1050,
        "y": 560,
        "wires": []
    },
    {
        "id": "dbf28cc4ae43e2ab",
        "type": "change",
        "z": "b8c63413a01bd779",
        "name": "charge lead",
        "rules": [
            {
                "t": "set",
                "p": "charge_lead",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1030,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "1ae771cffebb2400",
        "type": "comment",
        "z": "b8c63413a01bd779",
        "name": "Lead charger section",
        "info": "",
        "x": 840,
        "y": 480,
        "wires": []
    },
    {
        "id": "3036f60b81ac1783",
        "type": "function",
        "z": "b8c63413a01bd779",
        "name": "",
        "func": "msg.payload = msg.payload /1000;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 60,
        "wires": [
            [
                "a6b8733363d241aa"
            ]
        ]
    },
    {
        "id": "899b3faf3e5b6f03",
        "type": "debug",
        "z": "b8c63413a01bd779",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1310,
        "y": 240,
        "wires": []
    },
    {
        "id": "290b71846252473b",
        "type": "switch",
        "z": "b8c63413a01bd779",
        "name": "",
        "property": "charge_lead",
        "propertyType": "flow",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 250,
        "y": 360,
        "wires": [
            [
                "7c71b2126c7e4348",
                "958c2864691783df"
            ],
            [
                "6e9076f9068f57df",
                "5596f7fdc9bfd175"
            ]
        ]
    },
    {
        "id": "035ed53c898a5e04",
        "type": "mysql",
        "z": "b8c63413a01bd779",
        "mydb": "9accbd4c3bdcd845",
        "name": "",
        "x": 1420,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "d505cfb69593c0a7",
        "type": "mysql",
        "z": "b8c63413a01bd779",
        "mydb": "9accbd4c3bdcd845",
        "name": "broadcast injection",
        "x": 630,
        "y": 680,
        "wires": [
            []
        ]
    },
    {
        "id": "36873d317fb09e6a",
        "type": "debug",
        "z": "b8c63413a01bd779",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 570,
        "y": 20,
        "wires": []
    },
    {
        "id": "724a886f40d6569a",
        "type": "ui_led",
        "z": "25ed28d0b66e3987",
        "g": "c9b92354a4aa9390",
        "order": 6,
        "group": "8ccf1fb7e0607deb",
        "width": 3,
        "height": 1,
        "label": " ",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "colorForValue": [
            {
                "color": "#ff0000",
                "value": "false",
                "valueType": "bool"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showGlow": true,
        "name": "heartbeat led",
        "x": 690,
        "y": 480,
        "wires": []
    },
    {
        "id": "06a1bf7710a30c82",
        "type": "inject",
        "z": "25ed28d0b66e3987",
        "g": "c9b92354a4aa9390",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "2",
        "payloadType": "num",
        "x": 510,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "f4e29d19202c52ad",
        "type": "inject",
        "z": "25ed28d0b66e3987",
        "g": "c9b92354a4aa9390",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": "0.5",
        "topic": "",
        "payload": "false",
        "payloadType": "bool",
        "x": 130,
        "y": 520,
        "wires": [
            [
                "724a886f40d6569a",
                "d7c2d8387b1c3f57"
            ]
        ]
    },
    {
        "id": "6b479ab1d335e66c",
        "type": "change",
        "z": "25ed28d0b66e3987",
        "g": "c9b92354a4aa9390",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 480,
        "y": 480,
        "wires": [
            [
                "724a886f40d6569a"
            ]
        ]
    },
    {
        "id": "d7c2d8387b1c3f57",
        "type": "delay",
        "z": "25ed28d0b66e3987",
        "g": "c9b92354a4aa9390",
        "name": "",
        "pauseType": "delay",
        "timeout": "500",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 290,
        "y": 480,
        "wires": [
            [
                "6b479ab1d335e66c"
            ]
        ]
    },
    {
        "id": "9da637b037db05e4",
        "type": "ui_led",
        "z": "25ed28d0b66e3987",
        "g": "c9b92354a4aa9390",
        "order": 11,
        "group": "8ccf1fb7e0607deb",
        "width": 7,
        "height": 1,
        "label": "Pump:",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "colorForValue": [
            {
                "color": "#008000",
                "value": "true",
                "valueType": "bool"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showGlow": true,
        "name": "pump",
        "x": 670,
        "y": 540,
        "wires": []
    },
    {
        "id": "99581bad73f3c8e5",
        "type": "link in",
        "z": "25ed28d0b66e3987",
        "g": "c9b92354a4aa9390",
        "name": "",
        "links": [
            "48f32c625a731684"
        ],
        "x": 345,
        "y": 540,
        "wires": [
            [
                "1b4cae8416f67d6d"
            ]
        ]
    },
    {
        "id": "1b4cae8416f67d6d",
        "type": "change",
        "z": "25ed28d0b66e3987",
        "g": "c9b92354a4aa9390",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "output_state.pump",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 480,
        "y": 540,
        "wires": [
            [
                "9da637b037db05e4"
            ]
        ]
    },
    {
        "id": "2bef32fe350054f1",
        "type": "ui_led",
        "z": "25ed28d0b66e3987",
        "order": 8,
        "group": "8ccf1fb7e0607deb",
        "width": 3,
        "height": 1,
        "label": " ",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "colorForValue": [
            {
                "color": "#ff0000",
                "value": "false",
                "valueType": "bool"
            },
            {
                "color": "#008000",
                "value": "true",
                "valueType": "bool"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showGlow": true,
        "name": "aux_output_led",
        "x": 680,
        "y": 740,
        "wires": []
    },
    {
        "id": "0ec849d3331afbc9",
        "type": "change",
        "z": "25ed28d0b66e3987",
        "name": "store global var",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "output_state.aux_output",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 480,
        "y": 740,
        "wires": [
            [
                "2bef32fe350054f1"
            ]
        ]
    },
    {
        "id": "f08287179f37e99b",
        "type": "ui_switch",
        "z": "25ed28d0b66e3987",
        "name": "",
        "label": "Fill lower tank",
        "tooltip": "",
        "group": "8ccf1fb7e0607deb",
        "order": 7,
        "width": 4,
        "height": 1,
        "passthru": false,
        "decouple": "false",
        "topic": "",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 480,
        "y": 700,
        "wires": [
            []
        ]
    },
    {
        "id": "70b4de3fa34fa63f",
        "type": "ui_led",
        "z": "25ed28d0b66e3987",
        "order": 10,
        "group": "8ccf1fb7e0607deb",
        "width": 3,
        "height": 1,
        "label": " ",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "colorForValue": [
            {
                "color": "#008000",
                "value": "true",
                "valueType": "bool"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showGlow": true,
        "name": "upper_led",
        "x": 660,
        "y": 840,
        "wires": []
    },
    {
        "id": "af255c5d507b6de5",
        "type": "change",
        "z": "25ed28d0b66e3987",
        "name": "store global var",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "output_state.aux_output",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 480,
        "y": 840,
        "wires": [
            [
                "70b4de3fa34fa63f"
            ]
        ]
    },
    {
        "id": "25790572283b8c92",
        "type": "ui_switch",
        "z": "25ed28d0b66e3987",
        "name": "",
        "label": "Upper Tank",
        "tooltip": "",
        "group": "8ccf1fb7e0607deb",
        "order": 9,
        "width": 4,
        "height": 1,
        "passthru": false,
        "decouple": "false",
        "topic": "aux_output",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 470,
        "y": 800,
        "wires": [
            [
                "4b304b75048d5121"
            ]
        ]
    },
    {
        "id": "4b304b75048d5121",
        "type": "link out",
        "z": "25ed28d0b66e3987",
        "name": "hw_out",
        "mode": "link",
        "links": [
            "24647f2ef9cb98b1"
        ],
        "x": 755,
        "y": 800,
        "wires": []
    },
    {
        "id": "e38631f7f3f671b2",
        "type": "link in",
        "z": "25ed28d0b66e3987",
        "name": "hardware_state_trigger",
        "links": [
            "48f32c625a731684",
            "e9f912577a5edc23"
        ],
        "x": 305,
        "y": 840,
        "wires": [
            [
                "af255c5d507b6de5",
                "db1191083a7a7e49"
            ]
        ]
    },
    {
        "id": "f2f2a56e93993d24",
        "type": "ui_text",
        "z": "25ed28d0b66e3987",
        "group": "8ccf1fb7e0607deb",
        "order": 5,
        "width": 4,
        "height": 1,
        "name": "",
        "label": "Hearhbeat",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 430,
        "y": 620,
        "wires": []
    },
    {
        "id": "2ade261585ca8d6c",
        "type": "ui_text",
        "z": "25ed28d0b66e3987",
        "group": "8ccf1fb7e0607deb",
        "order": 2,
        "width": 3,
        "height": 1,
        "name": "",
        "label": "Used Water",
        "format": "",
        "layout": "row-left",
        "className": "",
        "x": 470,
        "y": 980,
        "wires": []
    },
    {
        "id": "9360977e73570162",
        "type": "ui_button",
        "z": "25ed28d0b66e3987",
        "name": "",
        "group": "8ccf1fb7e0607deb",
        "order": 4,
        "width": 2,
        "height": 1,
        "passthru": false,
        "label": "Reset",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 450,
        "y": 1040,
        "wires": [
            [
                "6ff26fefb7928d50"
            ]
        ]
    },
    {
        "id": "dd5f0682caef89df",
        "type": "ui_text",
        "z": "25ed28d0b66e3987",
        "group": "8ccf1fb7e0607deb",
        "order": 3,
        "width": 2,
        "height": 1,
        "name": "",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 830,
        "y": 980,
        "wires": []
    },
    {
        "id": "55a6ae3ac445f2fc",
        "type": "ui_gauge",
        "z": "25ed28d0b66e3987",
        "g": "aa0d157d98b48326",
        "name": "temp_in",
        "group": "4c88ce79aeb1c97e",
        "order": 1,
        "width": 4,
        "height": 5,
        "gtype": "donut",
        "title": "",
        "label": "In C°",
        "format": "{{value}}",
        "min": "-15",
        "max": "45",
        "colors": [
            "#00f900",
            "#00f900",
            "#00f900"
        ],
        "seg1": "",
        "seg2": "",
        "className": "",
        "x": 700,
        "y": 200,
        "wires": []
    },
    {
        "id": "fb49eb463b609a68",
        "type": "ui_gauge",
        "z": "25ed28d0b66e3987",
        "g": "aa0d157d98b48326",
        "name": "temp_out",
        "group": "4c88ce79aeb1c97e",
        "order": 2,
        "width": 3,
        "height": 5,
        "gtype": "donut",
        "title": "",
        "label": "Out C°",
        "format": "{{value}}",
        "min": "-15",
        "max": "45",
        "colors": [
            "#00f900",
            "#00f900",
            "#00f900"
        ],
        "seg1": "",
        "seg2": "",
        "className": "",
        "x": 700,
        "y": 160,
        "wires": []
    },
    {
        "id": "d5e999ebc14c178f",
        "type": "link in",
        "z": "25ed28d0b66e3987",
        "g": "aa0d157d98b48326",
        "name": "temp_in",
        "links": [
            "e53ab43e069dd8a3"
        ],
        "x": 575,
        "y": 160,
        "wires": [
            [
                "fb49eb463b609a68"
            ]
        ]
    },
    {
        "id": "0eff0e3cb6204a6d",
        "type": "link in",
        "z": "25ed28d0b66e3987",
        "g": "aa0d157d98b48326",
        "name": "temp_in",
        "links": [
            "00a386aa3c73ecfd"
        ],
        "x": 575,
        "y": 200,
        "wires": [
            [
                "55a6ae3ac445f2fc"
            ]
        ]
    },
    {
        "id": "db1191083a7a7e49",
        "type": "change",
        "z": "25ed28d0b66e3987",
        "name": "get water counter",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "water_meter_cnt",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 490,
        "y": 920,
        "wires": [
            [
                "36360d617a11c940"
            ]
        ]
    },
    {
        "id": "5b0b3aaf5cba6083",
        "type": "ui_gauge",
        "z": "25ed28d0b66e3987",
        "name": "",
        "group": "8ccf1fb7e0607deb",
        "order": 1,
        "width": 7,
        "height": 5,
        "gtype": "wave",
        "title": "",
        "label": "l",
        "format": "{{value}}",
        "min": 0,
        "max": "15",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "className": "",
        "x": 830,
        "y": 920,
        "wires": []
    },
    {
        "id": "6ff26fefb7928d50",
        "type": "change",
        "z": "25ed28d0b66e3987",
        "name": "get water counter",
        "rules": [
            {
                "t": "set",
                "p": "water_meter_cnt",
                "pt": "global",
                "to": "0",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 630,
        "y": 1040,
        "wires": [
            [
                "db1191083a7a7e49"
            ]
        ]
    },
    {
        "id": "36360d617a11c940",
        "type": "function",
        "z": "25ed28d0b66e3987",
        "name": "conversion",
        "func": "\nconst capacity = 15.0;\nvar consumed_in_l = msg.payload/500.0;\nmsg.payload = capacity - consumed_in_l;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 920,
        "wires": [
            [
                "5b0b3aaf5cba6083",
                "dd5f0682caef89df"
            ]
        ]
    },
    {
        "id": "201c2c30807ef967",
        "type": "inject",
        "z": "caafbe242ee04767",
        "g": "b10498f78b9fb638",
        "name": "1s trigger",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 160,
        "wires": [
            [
                "adac8c1d20d88736",
                "735962933b07806b"
            ]
        ]
    },
    {
        "id": "4ae8904edfe813c1",
        "type": "function",
        "z": "caafbe242ee04767",
        "g": "b10498f78b9fb638",
        "name": "data parser",
        "func": "// check if adc conversion ended\nif(msg.payload[2] == 0) {\n    // build adc value with data bytes\n    var adc_val = msg.payload[1]+ (msg.payload[0]<<8);\n    // calculate voltage divider (10k -100k)--> 1/11\n    adc_val = Math.round(adc_val*1.114)/100;\n    \n    return {payload:adc_val};\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 160,
        "wires": [
            [
                "97a5e37cf3a5ed25"
            ]
        ]
    },
    {
        "id": "735962933b07806b",
        "type": "delay",
        "z": "caafbe242ee04767",
        "g": "b10498f78b9fb638",
        "name": "",
        "pauseType": "delay",
        "timeout": "100",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 330,
        "y": 160,
        "wires": [
            [
                "8fd56c6b0a475c8d"
            ]
        ]
    },
    {
        "id": "2e7688235d64474d",
        "type": "exec",
        "z": "caafbe242ee04767",
        "command": "docker start d2d77066664b",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "start mysql container",
        "x": 420,
        "y": 520,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "f0f1fe06fc020f6a",
        "type": "inject",
        "z": "caafbe242ee04767",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 520,
        "wires": [
            [
                "2e7688235d64474d"
            ]
        ]
    },
    {
        "id": "97a5e37cf3a5ed25",
        "type": "rbe",
        "z": "caafbe242ee04767",
        "g": "b10498f78b9fb638",
        "name": "on change filter",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 920,
        "y": 160,
        "wires": [
            [
                "a064f7feb640a913"
            ]
        ]
    },
    {
        "id": "a064f7feb640a913",
        "type": "link out",
        "z": "caafbe242ee04767",
        "g": "b10498f78b9fb638",
        "name": "lead_voltage_trigger",
        "mode": "link",
        "links": [
            "3ae00b0239685317",
            "c3c23dd53fcd4f86"
        ],
        "x": 1055,
        "y": 160,
        "wires": []
    },
    {
        "id": "5347111e192ffe3e",
        "type": "function",
        "z": "caafbe242ee04767",
        "name": "checksum builder",
        "func": "var string = msg.payload;\n\n// checksum calculation\n//split string in bytes array\nvar string_array = string.substring(1).match(/.{1,2}/g);\nstring_array.push(string.substring(0,1));\n// add every bytes togheter\nvar sum = 0;\nfor(var i=0; i < string_array.length; i++){\n    sum = sum + parseInt(string_array[i], 16);\n}\n// subtract sum from 0x55 and convert it to string\nvar checksum = ((((85 - sum) % 256) + 256) % 256).toString(16).toUpperCase();\n\n\nmsg.payload = ':' + string + checksum + '\\n';\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 640,
        "wires": [
            [
                "31df8bf372ddad0c"
            ]
        ]
    },
    {
        "id": "5fd47aeb2bdca41e",
        "type": "function",
        "z": "caafbe242ee04767",
        "name": "checksum tester",
        "func": "// first output: command value\n// second output: message\n// third output: true if data is corrupted\n\nvar string = msg.payload;\n\n// take out start and stop signs (: and \\n)\nstring = string.substring(11, string.length-1);\n// get checksum (last byte)\nvar checksum = string.substring(string.length-2);\n\n// checksum calculation\n//split string in bytes array\nvar string_array = string.substring(1, string.length-2).match(/.{1,2}/g);\nstring_array.push(string.substring(0,1));\n// add every bytes togheter\nvar sum = 0;\nfor(var i=0; i < string_array.length; i++){\n    sum = sum + parseInt(string_array[i], 16);\n}\n// subtract sum from 0x55 and convert it to string all caps\nvar myChecksum = ((((85 - sum) % 256) + 256) % 256).toString(16).toUpperCase();\n\n// check data integrity\nvar isDataCorrupted;\nif(myChecksum == checksum){\n    // command\n    var msg1 = {payload: string.substring(0,1)};\n    // data\n    var msg2 = {payload: string.substring(1, string.length-2)};\n    return[msg1, msg2, null];\n}\nelse {\n    return[null, null, {payload: true}];\n}\n",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 640,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "5a80cacc84dd8ad4",
        "type": "comment",
        "z": "caafbe242ee04767",
        "name": "Hex mode",
        "info": "",
        "x": 140,
        "y": 600,
        "wires": []
    },
    {
        "id": "c48ef191c98160a7",
        "type": "inject",
        "z": "caafbe242ee04767",
        "name": "request today history",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "2",
        "topic": "",
        "payload": "7501000",
        "payloadType": "str",
        "x": 200,
        "y": 700,
        "wires": [
            [
                "5347111e192ffe3e"
            ]
        ]
    },
    {
        "id": "1c64553838476785",
        "type": "debug",
        "z": "caafbe242ee04767",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 710,
        "y": 720,
        "wires": []
    },
    {
        "id": "f0cb2bd540a77e99",
        "type": "inject",
        "z": "caafbe242ee04767",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "2",
        "topic": "",
        "payload": "7F0ED00",
        "payloadType": "str",
        "x": 160,
        "y": 740,
        "wires": [
            [
                "5347111e192ffe3e"
            ]
        ]
    },
    {
        "id": "5037b72635b1b458",
        "type": "exec",
        "z": "caafbe242ee04767",
        "g": "dbe48b6a4f7bad55",
        "command": "cat /sys/bus/w1/devices/28-00000015081d/w1_slave",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Get fridge temp",
        "x": 340,
        "y": 280,
        "wires": [
            [
                "d99ec2a5f880790f",
                "3168cfd8a06313e9"
            ],
            [],
            []
        ]
    },
    {
        "id": "6d7e5dbf538df0f9",
        "type": "function",
        "z": "caafbe242ee04767",
        "g": "dbe48b6a4f7bad55",
        "name": "parse temp and store into global var",
        "func": "var temp = msg.payload;\n//extract temperature from string\ntemp = parseInt(temp.substring(temp.indexOf(\"=\", temp.indexOf(\"\\n\"))+1));\n// convert temperature to °C and round it with 1 decimal\ntemp = (Math.round(temp/100))/10;\nmsg.payload = temp;\n\nglobal.set(\"sensors.fridge_temp\", temp);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 260,
        "wires": [
            [
                "2efaa46c04158d68"
            ]
        ]
    },
    {
        "id": "d99ec2a5f880790f",
        "type": "rbe",
        "z": "caafbe242ee04767",
        "g": "dbe48b6a4f7bad55",
        "name": "on change filter",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 560,
        "y": 260,
        "wires": [
            [
                "6d7e5dbf538df0f9"
            ]
        ]
    },
    {
        "id": "2efaa46c04158d68",
        "type": "link out",
        "z": "caafbe242ee04767",
        "g": "dbe48b6a4f7bad55",
        "name": "fridge_temp_trigger",
        "mode": "link",
        "links": [
            "a9e99bfbd5a6d2af",
            "5e5d6802bb9f2f2f"
        ],
        "x": 1055,
        "y": 260,
        "wires": []
    },
    {
        "id": "00a386aa3c73ecfd",
        "type": "link out",
        "z": "caafbe242ee04767",
        "g": "dbe48b6a4f7bad55",
        "name": "indoor_temp_trigger",
        "mode": "link",
        "links": [
            "0eff0e3cb6204a6d",
            "02869ffd1e71cf2e"
        ],
        "x": 1055,
        "y": 320,
        "wires": []
    },
    {
        "id": "e53ab43e069dd8a3",
        "type": "link out",
        "z": "caafbe242ee04767",
        "g": "dbe48b6a4f7bad55",
        "name": "outdoor_temp_trigger",
        "mode": "link",
        "links": [
            "d5e999ebc14c178f",
            "b80ae4a8e1197d16"
        ],
        "x": 1055,
        "y": 380,
        "wires": []
    },
    {
        "id": "3168cfd8a06313e9",
        "type": "exec",
        "z": "caafbe242ee04767",
        "g": "dbe48b6a4f7bad55",
        "command": "cat /sys/bus/w1/devices/28-0000001538b5/w1_slave",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Get indoor temp",
        "x": 340,
        "y": 340,
        "wires": [
            [
                "d9ac4e5b6e2bb63d",
                "f351f4af7934daf0"
            ],
            [],
            []
        ]
    },
    {
        "id": "d9ac4e5b6e2bb63d",
        "type": "rbe",
        "z": "caafbe242ee04767",
        "g": "dbe48b6a4f7bad55",
        "name": "on change filter",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 560,
        "y": 320,
        "wires": [
            [
                "c0742511f4277387"
            ]
        ]
    },
    {
        "id": "f351f4af7934daf0",
        "type": "exec",
        "z": "caafbe242ee04767",
        "g": "dbe48b6a4f7bad55",
        "command": "cat /sys/bus/w1/devices/28-000000152b52/w1_slave",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Get outdoor temp",
        "x": 350,
        "y": 400,
        "wires": [
            [
                "3b8cc007df89f286",
                "02708b1a04d8371d"
            ],
            [],
            []
        ]
    },
    {
        "id": "3b8cc007df89f286",
        "type": "rbe",
        "z": "caafbe242ee04767",
        "g": "dbe48b6a4f7bad55",
        "name": "on change filter",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 560,
        "y": 380,
        "wires": [
            [
                "098183b4045c6339"
            ]
        ]
    },
    {
        "id": "b850689cb2dcc1db",
        "type": "inject",
        "z": "caafbe242ee04767",
        "g": "dbe48b6a4f7bad55",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": false,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 280,
        "wires": [
            [
                "5037b72635b1b458"
            ]
        ]
    },
    {
        "id": "c0742511f4277387",
        "type": "function",
        "z": "caafbe242ee04767",
        "g": "dbe48b6a4f7bad55",
        "name": "parse temp and store into global var",
        "func": "var temp = msg.payload;\n//extract temperature from string\ntemp = parseInt(temp.substring(temp.indexOf(\"=\", temp.indexOf(\"\\n\"))+1));\n// convert temperature to °C and round it with 1 decimal\ntemp = (Math.round(temp/100))/10;\nmsg.payload = temp;\n\nglobal.set(\"sensors.indoor_temp\", temp);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 320,
        "wires": [
            [
                "00a386aa3c73ecfd"
            ]
        ]
    },
    {
        "id": "098183b4045c6339",
        "type": "function",
        "z": "caafbe242ee04767",
        "g": "dbe48b6a4f7bad55",
        "name": "parse temp and store into global var",
        "func": "var temp = msg.payload;\n//extract temperature from string\ntemp = parseInt(temp.substring(temp.indexOf(\"=\", temp.indexOf(\"\\n\"))+1));\n// convert temperature to °C and round it with 1 decimal\ntemp = (Math.round(temp/100))/10;\nmsg.payload = temp;\n\nglobal.set(\"sensors.outdoor_temp\", temp);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 380,
        "wires": [
            [
                "e53ab43e069dd8a3"
            ]
        ]
    },
    {
        "id": "ef2eeb068612671d",
        "type": "function",
        "z": "caafbe242ee04767",
        "g": "dbe48b6a4f7bad55",
        "name": "sensors logger",
        "func": "const db_injection_msg = \"INSERT INTO sensors (indoor_temp, outdoor_temp, fridge_temp) VALUES (?,?,?);\";\n\nmsg.payload = [global.get(\"sensors.indoor_temp\")*1000, global.get(\"sensors.outdoor_temp\")*1000, global.get(\"sensors.fridge_temp\")*1000];\nmsg.topic = db_injection_msg;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 440,
        "wires": [
            [
                "2c9edde2ecbcc284"
            ]
        ]
    },
    {
        "id": "02708b1a04d8371d",
        "type": "delay",
        "z": "caafbe242ee04767",
        "g": "dbe48b6a4f7bad55",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "minute",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 560,
        "y": 440,
        "wires": [
            [
                "ef2eeb068612671d"
            ]
        ]
    },
    {
        "id": "2c9edde2ecbcc284",
        "type": "mysql",
        "z": "caafbe242ee04767",
        "g": "dbe48b6a4f7bad55",
        "mydb": "9accbd4c3bdcd845",
        "name": "sensors injection",
        "x": 970,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "31df8bf372ddad0c",
        "type": "serial request",
        "z": "caafbe242ee04767",
        "d": true,
        "name": "",
        "serial": "594a8a527370c352",
        "x": 530,
        "y": 640,
        "wires": [
            [
                "1c64553838476785"
            ]
        ]
    },
    {
        "id": "adac8c1d20d88736",
        "type": "i2c in",
        "z": "caafbe242ee04767",
        "g": "b10498f78b9fb638",
        "name": "single shot request",
        "busno": "1",
        "address": "105",
        "command": "128",
        "count": "3",
        "x": 530,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "8fd56c6b0a475c8d",
        "type": "i2c in",
        "z": "caafbe242ee04767",
        "g": "b10498f78b9fb638",
        "name": "read data request",
        "busno": "1",
        "address": "105",
        "command": "0",
        "count": "3",
        "x": 530,
        "y": 160,
        "wires": [
            [
                "4ae8904edfe813c1"
            ]
        ]
    },
    {
        "id": "1313a6e368d0c2ea",
        "type": "ui_led",
        "z": "6cf6befc5f6ea083",
        "order": 5,
        "group": "83e9ca27a8b9a1f0",
        "width": 0,
        "height": 0,
        "label": "Aux Input 2:",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "colorForValue": [
            {
                "color": "#ff0000",
                "value": "false",
                "valueType": "bool"
            },
            {
                "color": "#008000",
                "value": "true",
                "valueType": "bool"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showGlow": true,
        "name": "aux_input_2",
        "x": 510,
        "y": 220,
        "wires": []
    },
    {
        "id": "4aa2a596c8f42f9f",
        "type": "ui_led",
        "z": "6cf6befc5f6ea083",
        "order": 2,
        "group": "83e9ca27a8b9a1f0",
        "width": 0,
        "height": 0,
        "label": "switch kitchen:",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "colorForValue": [
            {
                "color": "#ff0000",
                "value": "false",
                "valueType": "bool"
            },
            {
                "color": "#008000",
                "value": "true",
                "valueType": "bool"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showGlow": true,
        "name": "switch kitchen",
        "x": 520,
        "y": 100,
        "wires": []
    },
    {
        "id": "7c4baa27440a5a99",
        "type": "ui_led",
        "z": "6cf6befc5f6ea083",
        "order": 3,
        "group": "83e9ca27a8b9a1f0",
        "width": 0,
        "height": 0,
        "label": "switch living room:",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "colorForValue": [
            {
                "color": "#ff0000",
                "value": "false",
                "valueType": "bool"
            },
            {
                "color": "#008000",
                "value": "true",
                "valueType": "bool"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showGlow": true,
        "name": "switch living room",
        "x": 530,
        "y": 140,
        "wires": []
    },
    {
        "id": "92db1cb34487421f",
        "type": "ui_led",
        "z": "6cf6befc5f6ea083",
        "order": 4,
        "group": "83e9ca27a8b9a1f0",
        "width": 0,
        "height": 0,
        "label": "Aux Input 1:",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "colorForValue": [
            {
                "color": "#ff0000",
                "value": "false",
                "valueType": "bool"
            },
            {
                "color": "#008000",
                "value": "true",
                "valueType": "bool"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showGlow": true,
        "name": "aux_input_1",
        "x": 510,
        "y": 180,
        "wires": []
    },
    {
        "id": "894a610f92f1bb5c",
        "type": "change",
        "z": "6cf6befc5f6ea083",
        "name": "store global var",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "input_state.switch_kitchen",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 320,
        "y": 100,
        "wires": [
            [
                "4aa2a596c8f42f9f"
            ]
        ]
    },
    {
        "id": "e9f307c6d4787ba3",
        "type": "change",
        "z": "6cf6befc5f6ea083",
        "name": "store global var",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "input_state.switch_living_room",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 320,
        "y": 140,
        "wires": [
            [
                "7c4baa27440a5a99"
            ]
        ]
    },
    {
        "id": "73e4830e96a3f453",
        "type": "change",
        "z": "6cf6befc5f6ea083",
        "name": "store global var",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "input_state.aux_input_1",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 320,
        "y": 180,
        "wires": [
            [
                "92db1cb34487421f"
            ]
        ]
    },
    {
        "id": "e5ced28751e40272",
        "type": "change",
        "z": "6cf6befc5f6ea083",
        "name": "store global var",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "input_state.aux_input_2",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 320,
        "y": 220,
        "wires": [
            [
                "1313a6e368d0c2ea"
            ]
        ]
    },
    {
        "id": "661173c7ef944d60",
        "type": "link in",
        "z": "6cf6befc5f6ea083",
        "name": "hardware_state_trigger",
        "links": [
            "48f32c625a731684",
            "e9f912577a5edc23"
        ],
        "x": 135,
        "y": 300,
        "wires": [
            [
                "894a610f92f1bb5c",
                "e9f307c6d4787ba3",
                "73e4830e96a3f453",
                "e5ced28751e40272",
                "1859e252b3acdb40",
                "32aa9accf231a375",
                "a68fe46df5833230",
                "f17bc8630064dfd2",
                "d6203e418deeed09",
                "0e123a9315b16430"
            ]
        ]
    },
    {
        "id": "68428207d8c500fa",
        "type": "ui_led",
        "z": "6cf6befc5f6ea083",
        "order": 16,
        "group": "83e9ca27a8b9a1f0",
        "width": 3,
        "height": 1,
        "label": " ",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "colorForValue": [
            {
                "color": "#ff0000",
                "value": "false",
                "valueType": "bool"
            },
            {
                "color": "#008000",
                "value": "true",
                "valueType": "bool"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showGlow": true,
        "name": "pump_led",
        "x": 500,
        "y": 680,
        "wires": []
    },
    {
        "id": "4ca11426b9f29017",
        "type": "ui_led",
        "z": "6cf6befc5f6ea083",
        "order": 18,
        "group": "83e9ca27a8b9a1f0",
        "width": 3,
        "height": 1,
        "label": " ",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "colorForValue": [
            {
                "color": "#ff0000",
                "value": "false",
                "valueType": "bool"
            },
            {
                "color": "#008000",
                "value": "true",
                "valueType": "bool"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showGlow": true,
        "name": "aux_output_led",
        "x": 520,
        "y": 760,
        "wires": []
    },
    {
        "id": "1859e252b3acdb40",
        "type": "change",
        "z": "6cf6befc5f6ea083",
        "name": "store global var",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "output_state.pump",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 320,
        "y": 680,
        "wires": [
            [
                "68428207d8c500fa"
            ]
        ]
    },
    {
        "id": "32aa9accf231a375",
        "type": "change",
        "z": "6cf6befc5f6ea083",
        "name": "store global var",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "output_state.aux_output",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 320,
        "y": 760,
        "wires": [
            [
                "4ca11426b9f29017"
            ]
        ]
    },
    {
        "id": "5fae384607251851",
        "type": "ui_template",
        "z": "6cf6befc5f6ea083",
        "group": "83e9ca27a8b9a1f0",
        "name": "",
        "order": 6,
        "width": 0,
        "height": 0,
        "format": "<div style=\"font-weight: bold;\"><br>Outputs</div></div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 500,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "f02ba462a935dcb4",
        "type": "ui_template",
        "z": "6cf6befc5f6ea083",
        "group": "83e9ca27a8b9a1f0",
        "name": "",
        "order": 1,
        "width": 0,
        "height": 0,
        "format": "<div style=\"font-weight: bold;\"><br>Inputs</div></div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 500,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "1b930c77561eb694",
        "type": "ui_switch",
        "z": "6cf6befc5f6ea083",
        "name": "",
        "label": "LFP Charger",
        "tooltip": "",
        "group": "83e9ca27a8b9a1f0",
        "order": 7,
        "width": 4,
        "height": 1,
        "passthru": false,
        "decouple": "false",
        "topic": "charger",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 510,
        "y": 320,
        "wires": [
            [
                "125a413ffcc32efb"
            ]
        ]
    },
    {
        "id": "7c2a1a9ec589e760",
        "type": "ui_led",
        "z": "6cf6befc5f6ea083",
        "order": 8,
        "group": "83e9ca27a8b9a1f0",
        "width": 3,
        "height": 1,
        "label": " ",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "colorForValue": [
            {
                "color": "#ff0000",
                "value": "false",
                "valueType": "bool"
            },
            {
                "color": "#008000",
                "value": "true",
                "valueType": "bool"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showGlow": true,
        "name": "charger_led",
        "x": 510,
        "y": 360,
        "wires": []
    },
    {
        "id": "a68fe46df5833230",
        "type": "change",
        "z": "6cf6befc5f6ea083",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "output_state.charger",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 320,
        "y": 360,
        "wires": [
            [
                "7c2a1a9ec589e760"
            ]
        ]
    },
    {
        "id": "125a413ffcc32efb",
        "type": "link out",
        "z": "6cf6befc5f6ea083",
        "name": "hw_out",
        "mode": "link",
        "links": [
            "24647f2ef9cb98b1"
        ],
        "x": 905,
        "y": 560,
        "wires": []
    },
    {
        "id": "aea686bdb767bec6",
        "type": "ui_switch",
        "z": "6cf6befc5f6ea083",
        "name": "",
        "label": "Fridge",
        "tooltip": "",
        "group": "83e9ca27a8b9a1f0",
        "order": 9,
        "width": 4,
        "height": 1,
        "passthru": false,
        "decouple": "false",
        "topic": "fridge",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 490,
        "y": 400,
        "wires": [
            [
                "125a413ffcc32efb"
            ]
        ]
    },
    {
        "id": "4ea05922df4dca5e",
        "type": "ui_led",
        "z": "6cf6befc5f6ea083",
        "order": 10,
        "group": "83e9ca27a8b9a1f0",
        "width": 3,
        "height": 1,
        "label": " ",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "colorForValue": [
            {
                "color": "#ff0000",
                "value": "false",
                "valueType": "bool"
            },
            {
                "color": "#008000",
                "value": "true",
                "valueType": "bool"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showGlow": true,
        "name": "fridge_led",
        "x": 500,
        "y": 440,
        "wires": []
    },
    {
        "id": "0e123a9315b16430",
        "type": "change",
        "z": "6cf6befc5f6ea083",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "output_state.fridge",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 320,
        "y": 440,
        "wires": [
            [
                "4ea05922df4dca5e"
            ]
        ]
    },
    {
        "id": "42e707e03982f25c",
        "type": "ui_switch",
        "z": "6cf6befc5f6ea083",
        "name": "",
        "label": "Inverter",
        "tooltip": "",
        "group": "83e9ca27a8b9a1f0",
        "order": 11,
        "width": 4,
        "height": 1,
        "passthru": false,
        "decouple": "false",
        "topic": "inverter",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 500,
        "y": 480,
        "wires": [
            [
                "125a413ffcc32efb"
            ]
        ]
    },
    {
        "id": "e4cf15ab05568e54",
        "type": "ui_led",
        "z": "6cf6befc5f6ea083",
        "order": 12,
        "group": "83e9ca27a8b9a1f0",
        "width": 3,
        "height": 1,
        "label": " ",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "colorForValue": [
            {
                "color": "#ff0000",
                "value": "false",
                "valueType": "bool"
            },
            {
                "color": "#008000",
                "value": "true",
                "valueType": "bool"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showGlow": true,
        "name": "inverter_led",
        "x": 510,
        "y": 520,
        "wires": []
    },
    {
        "id": "d6203e418deeed09",
        "type": "change",
        "z": "6cf6befc5f6ea083",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "output_state.inverter",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 320,
        "y": 520,
        "wires": [
            [
                "e4cf15ab05568e54"
            ]
        ]
    },
    {
        "id": "74175b34245bd3b5",
        "type": "ui_switch",
        "z": "6cf6befc5f6ea083",
        "name": "",
        "label": "Inverter Source",
        "tooltip": "",
        "group": "83e9ca27a8b9a1f0",
        "order": 13,
        "width": 4,
        "height": 1,
        "passthru": false,
        "decouple": "false",
        "topic": "battery_select",
        "topicType": "str",
        "style": "",
        "onvalue": "lead_battery",
        "onvalueType": "str",
        "onicon": "",
        "oncolor": "",
        "offvalue": "lfp_battery",
        "offvalueType": "str",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 520,
        "y": 560,
        "wires": [
            [
                "125a413ffcc32efb"
            ]
        ]
    },
    {
        "id": "f17bc8630064dfd2",
        "type": "change",
        "z": "6cf6befc5f6ea083",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "output_state.inverter_source",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 320,
        "y": 600,
        "wires": [
            [
                "56be1706e95b985e"
            ]
        ]
    },
    {
        "id": "56be1706e95b985e",
        "type": "ui_text",
        "z": "6cf6befc5f6ea083",
        "group": "83e9ca27a8b9a1f0",
        "order": 14,
        "width": 3,
        "height": 1,
        "name": "source select",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 510,
        "y": 600,
        "wires": []
    },
    {
        "id": "8b385bbaa0740b8d",
        "type": "ui_switch",
        "z": "6cf6befc5f6ea083",
        "name": "",
        "label": "pump",
        "tooltip": "",
        "group": "83e9ca27a8b9a1f0",
        "order": 15,
        "width": 4,
        "height": 1,
        "passthru": false,
        "decouple": "false",
        "topic": "pump",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 490,
        "y": 640,
        "wires": [
            [
                "125a413ffcc32efb"
            ]
        ]
    },
    {
        "id": "3dca9ee4c6b3a68b",
        "type": "ui_switch",
        "z": "6cf6befc5f6ea083",
        "name": "",
        "label": "aux output",
        "tooltip": "",
        "group": "83e9ca27a8b9a1f0",
        "order": 17,
        "width": 4,
        "height": 1,
        "passthru": false,
        "decouple": "false",
        "topic": "aux_output",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 510,
        "y": 720,
        "wires": [
            [
                "125a413ffcc32efb"
            ]
        ]
    }
]